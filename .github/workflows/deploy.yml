name: CI/CD Deploy

on:
  push:
    branches: [master, main]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5434:5432
        env:
          POSTGRES_USER: ifeanyidike
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: cenphidb_test
        options: >-
          --health-cmd "pg_isready -U ifeanyidike" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    strategy:
      matrix:
        service: [api-server, ai-service]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Create .env.test file
        run: |
          cat <<EOF > .env.test
          DB_USERNAME=ifeanyidike
          DB_PASSWORD=test_password
          DB_HOST=127.0.0.1
          DB_PORT=5434
          DB_NAME=cenphidb_test
          EOF

      # Optionally wait for the DB to be ready (using sleep or a health check)
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if nc -z localhost 5434; then
              echo "Postgres is up!"
              exit 0
            fi
            echo "Waiting for Postgres..."
            sleep 2
          done
          echo "Postgres did not start in time."
          exit 1

      # API Server tests (Golang)
      - name: Set up Go for API Server
        if: ${{ matrix.service == 'api-server' }}
        uses: actions/setup-go@v2
        with:
          go-version: "1.23"
      - name: Test API Server
        if: ${{ matrix.service == 'api-server' }}
        run: |
          cd api-server
          go test ./...

      # AI Service tests (Python)
      - name: Set up Python for AI Service
        if: ${{ matrix.service == 'ai-service' }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: Install dependencies for AI Service
        if: ${{ matrix.service == 'ai-service' }}
        run: |
          cd ai-service
          pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test AI Service
        if: ${{ matrix.service == 'ai-service' }}
        run: |
          cd ai-service
          pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-server, ai-service]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Install Docker Slim
      - name: Install Docker Slim
        run: |
          wget -q https://github.com/docker-slim/docker-slim/releases/download/1.41.0/dist_linux.tar.gz
          tar xzf dist_linux.tar.gz
          chmod +x docker-slim
          sudo mv docker-slim /usr/local/bin/
          docker-slim --version

      # Set up Docker Buildx (for multi-platform builds if needed)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: lorddickson/${{ matrix.service }}:latest

      # For the AI service, run your slim process
      - name: Slim AI Service Image
        if: ${{ matrix.service == 'ai-service' }}
        working-directory: ai-service
        run: make slim-docker-full-v2

  deploy_api:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: SSH Deploy to API Server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.API_SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/opc && ./deploy.sh

  deploy_ai:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: SSH Deploy to AI Service
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AI_SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd /home/opc && ./deploy.sh
