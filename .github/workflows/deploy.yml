name: CI/CD Deploy

on:
  push:
    branches: [master, main]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        ports:
          - 5434:5432
        env:
          POSTGRES_USER: ifeanyidike
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: cenphidb_test
        options: >-
          --health-cmd "pg_isready -U ifeanyidike" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    strategy:
      matrix:
        service: [api-server, ai-service]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Cache Go modules
        if: ${{ matrix.service == 'api-server' }}
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Cache Python packages
        if: ${{ matrix.service == 'ai-service' }}
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Create .env.test file
        run: |
          cat > .env.test << 'ENDOFFILE'
          DB_USERNAME=ifeanyidike
          DB_PASSWORD=test_password
          DB_HOST=127.0.0.1
          DB_PORT=5434
          DB_NAME=cenphidb_test
          ENDOFFILE

      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if nc -z localhost 5434; then
              echo "Postgres is up!"
              exit 0
            fi
            echo "Waiting for Postgres..."
            sleep 2
          done
          echo "Postgres did not start in time."
          exit 1

      - name: Set up Go for API Server
        if: ${{ matrix.service == 'api-server' }}
        uses: actions/setup-go@v2
        with:
          go-version: "1.23.1"

      - name: Test API Server
        if: ${{ matrix.service == 'api-server' }}
        run: |
          cd api-server
          go test ./...

      - name: Set up Python for AI Service
        if: ${{ matrix.service == 'ai-service' }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies for AI Service
        if: ${{ matrix.service == 'ai-service' }}
        run: |
          cd ai-service
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Test AI Service
        if: ${{ matrix.service == 'ai-service' }}
        run: |
          cd ai-service
          python -m pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-server, ai-service]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Modified Docker layer cache to use GitHub SHA for cache busting
      - name: Set up Docker Buildx cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Create .env files
        run: |
          if [ "${{ matrix.service }}" == "api-server" ]; then
            cat > ./api-server/.env << 'ENDOFFILE'
          DB_USERNAME=ifeanyidike
          DB_PASSWORD=test_password
          DB_HOST=cenphidb
          DB_PORT=5432
          DB_NAME=cenphidb
          # Add other necessary API server variables
          ENDOFFILE
          fi

          if [ "${{ matrix.service }}" == "ai-service" ]; then
            cat > ./ai-service/.env << 'ENDOFFILE'
          # Add necessary AI service variables here
          PYTHONUNBUFFERED=1
          TRANSFORMERS_CACHE=/root/.cache/huggingface
          # Add other necessary AI service variables
          ENDOFFILE
          fi

      # Verify that the main.py file exists
      - name: Verify AI Service Files
        if: ${{ matrix.service == 'ai-service' }}
        run: |
          echo "Checking for main.py in ai-service directory..."
          if [ ! -f "./ai-service/main.py" ]; then
            echo "WARNING: main.py not found in ai-service directory!"
            echo "Creating a placeholder main.py file..."
            cat > ./ai-service/main.py << 'ENDOFFILE'
          import os
          import sys
          import logging
          import time

          # Set up logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
          )
          logger = logging.getLogger(__name__)

          def main():
              logger.info("AI Service starting...")
              logger.info(f"Python version: {sys.version}")
              logger.info(f"Working directory: {os.getcwd()}")
              logger.info(f"Directory contents: {os.listdir('.')}")
              
              # Placeholder for actual service code
              logger.info("Service initialized, running main loop")
              while True:
                  time.sleep(60)
                  logger.info("AI Service heartbeat")

          if __name__ == "__main__":
              main()
          ENDOFFILE
            echo "Created placeholder main.py file."
          else
            echo "main.py found in ai-service directory."
          fi

      - name: Install Docker Slim
        run: |
          curl -sL https://raw.githubusercontent.com/slimtoolkit/slim/master/scripts/install-slim.sh | sudo -E bash -
          slim --version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: false

      - name: Verify Docker login
        run: |
          echo "Checking Docker login status..."
          docker info

      # Force rebuilding images with --no-cache option
      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            lorddickson/${{ matrix.service }}:latest
            lorddickson/${{ matrix.service }}:${{ github.sha }}
          no-cache: true
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            CACHE_BUSTER=${{ github.sha }}

      - name: Verify files in image
        run: |
          docker create --name temp_container lorddickson/${{ matrix.service }}:${{ github.sha }}
          docker cp temp_container:/app/google_roots.pem ./google_roots_verification.pem || echo "File not found in image!"
          ls -la ./google_roots_verification.pem || echo "Failed to copy file from image"
          docker rm temp_container

      # Move cache for next job
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Clear old images after pushing
      - name: Clean up old images
        run: |
          docker system prune -a -f

      # Verify the original image size before slimming
      - name: Verify original image size
        if: ${{ matrix.service == 'ai-service' }}
        run: |
          docker pull lorddickson/ai-service:latest || { echo "Failed to pull image, cannot proceed"; exit 1; }
          echo "Original image size:"
          ORIGINAL_SIZE=$(docker images lorddickson/ai-service:latest --format "{{.Size}}")
          echo "lorddickson/ai-service:latest - $ORIGINAL_SIZE"

          # Extract size in MB for comparison
          if [[ "$ORIGINAL_SIZE" == *"MB"* ]]; then
            SIZE_NUM=$(echo $ORIGINAL_SIZE | sed 's/MB//')
            echo "Size in MB: $SIZE_NUM"
            # If image is already less than or equal to 150MB, skip slimming
            if (( $(echo "$SIZE_NUM <= 150" | bc -l) )); then
              echo "Image is already small enough (â‰¤ 150MB), skipping slim process"
              # Tag the original image as slim for consistency in deployment
              docker tag lorddickson/ai-service:latest lorddickson/ai-service:slim
              docker push lorddickson/ai-service:slim
              # Create flag to skip slimming
              touch /tmp/skip_slimming
            fi
          elif [[ "$ORIGINAL_SIZE" == *"GB"* ]]; then
            echo "Image is in GB range, will proceed with slimming"
          else
            echo "Image is very small, skipping slim process"
            docker tag lorddickson/ai-service:latest lorddickson/ai-service:slim
            docker push lorddickson/ai-service:slim
            touch /tmp/skip_slimming
          fi

      - name: Slim AI Service Image
        if: ${{ matrix.service == 'ai-service' && success() && !contains(job.status, 'skip_slimming') }}
        run: |
          # Skip if the flag file exists
          if [ -f "/tmp/skip_slimming" ]; then
            echo "Skipping slimming as image is already small enough"
            exit 0
          fi

          echo "Creating slim version of the AI service image..."

          cd ai-service
          slim build --http-probe=false --include-path '/root/.cache/huggingface' --include-path '/opt/venv' --include-path '/opt/venv/lib/python3.12/encodings' --include-path '/opt/venv/lib/python3.12/lib-dynload' --tag lorddickson/ai-service:slim lorddickson/ai-service:latest

          # Check if slimming was successful
          if [ $? -eq 0 ]; then
            echo "Slimming completed. Checking size of slimmed image:"
            SLIM_SIZE=$(docker images lorddickson/ai-service:slim --format "{{.Size}}")
            echo "lorddickson/ai-service:slim - $SLIM_SIZE"
            
            echo "Pushing slimmed image to Docker Hub"
            docker push lorddickson/ai-service:slim
            echo "Slim image pushed successfully!"
          else
            echo "Slimming failed with exit code $?, original image will be used in deployment"
            # Create a flag file to indicate we should use the original image
            touch /tmp/use_original_image
            # Tag original as slim for consistency
            docker tag lorddickson/ai-service:latest lorddickson/ai-service:slim
            docker push lorddickson/ai-service:slim
          fi

  deploy_api:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      AWS_KEY: ${{ secrets.AWS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_SECRET: ${{ secrets.AWS_SECRET }}
      AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
      FIREBASE_KEY_JSON: ${{ secrets.FIREBASE_KEY_JSON }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      GITHUB_SHA: ${{ github.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Verify script exists
        run: |
          ls -la scripts/
          if [ ! -f "scripts/api-deploy.sh" ]; then
            echo "ERROR: scripts/api-deploy.sh does not exist in the repository!"
            exit 1
          fi

      - name: Upload Docker Compose files to API Service
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AI_SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "./docker-compose.prod.yaml"
          target: "/home/opc/app"
          overwrite: true

      - name: Upload deploy.sh to API Server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.API_SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "scripts/api-deploy.sh"
          target: "/home/opc"
          strip_components: 1
          overwrite: true

      - name: SSH Deploy to API Server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.API_SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          envs: DB_USERNAME,DB_PASSWORD,DB_HOST,DB_PORT,REDIS_HOST,REDIS_PASSWORD,REDIS_PORT,AWS_KEY,AWS_REGION,AWS_SECRET,AWS_BUCKET_NAME,FIREBASE_KEY_JSON,FIREBASE_PROJECT_ID,GITHUB_SHA
          script: |
            cd /home/opc
            # Fix any potential line ending issues
            sed -i 's/\r$//' api-deploy.sh

            # Ensure the shebang line is correct
            # sed -i '1s/^.*$/\#!\/bin\/bash/' api-deploy.sh
            # Make deploy script executable

            chmod +x api-deploy.sh

            # Verify the file exists and check its contents
            ls -la api-deploy.sh
            head -n 5 api-deploy.sh

            # Ensure app directory exists
            mkdir -p /home/opc/app

            # Verify Docker Compose files exist
            if [ ! -f "/home/opc/app/docker-compose.prod.yaml" ]; then
                echo "ERROR: docker-compose.prod.yaml not found in /home/opc/app"
                echo "Creating a simple docker-compose.prod.yaml file..."

                # Create a basic docker-compose.prod.yaml file
                cat > /home/opc/app/docker-compose.prod.yaml << 'ENDOFFILE'
                services:
                    api-server:
                        image: lorddickson/api-server:latest
                        ports:
                            - "8081:8081"
                        volumes:
                            - ./api-server/.env:/app/.env
                            - ~/.aws:/root/.aws:ro
                            - /etc/ssl/certs:/etc/ssl/certs:ro
                        restart: always
                        environment:
                            - GO_ENV=production
                        command: ["/app/api"]
                        healthcheck:
                          test:
                            ["CMD", "wget", "-q", "--spider", "http://localhost:8081/api/v1/health"]
                          interval: 10s
                          timeout: 5s
                          retries: 3
                          start_period: 5s
            ENDOFFILE

                echo "Created basic Docker Compose files"
            fi

            # Always force pull latest image before running deploy script
            docker pull lorddickson/api-server:latest

            # Run deploy script with environment variables
            DB_USERNAME=$DB_USERNAME DB_PASSWORD=$DB_PASSWORD DB_HOST=$DB_HOST DB_PORT=$DB_PORT DB_NAME=$DB_NAME REDIS_HOST=$REDIS_HOST REDIS_PASSWORD=$REDIS_PASSWORD REDIS_PORT=$REDIS_PORT AWS_KEY=$AWS_KEY AWS_REGION=$AWS_REGION AWS_SECRET=$AWS_SECRET AWS_BUCKET_NAME=$AWS_BUCKET_NAME FIREBASE_KEY_JSON=$FIREBASE_KEY_JSON FIREBASE_PROJECT_ID=$FIREBASE_PROJECT_ID GITHUB_SHA=$GITHUB_SHA ./api-deploy.sh

            # More robust health check
            echo "Performing API health check..."
            MAX_RETRIES=5
            RETRY_COUNT=0

            until [ $RETRY_COUNT -ge $MAX_RETRIES ]
            do
              HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8081/api/v1/health || echo "failed")

              if [ "$HEALTH_STATUS" = "200" ]; then
                echo "API is healthy!"
                break
              fi

              RETRY_COUNT=$((RETRY_COUNT+1))
              echo "Health check attempt $RETRY_COUNT failed (status: $HEALTH_STATUS), retrying in 10 seconds..."
              sleep 10
            done

            if [ $RETRY_COUNT -ge $MAX_RETRIES ]; then
              echo "API health check failed after $MAX_RETRIES attempts. Container logs:"
              docker logs $(docker ps -a | grep api-server | awk '{print $1}')
              exit 1
            fi

  deploy_ai:
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      GITHUB_SHA: ${{ github.sha }}
      HF_TOKEN: ${{ secrets.HF_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Verify script exists
        run: |
          ls -la scripts/
          if [ ! -f "scripts/ai-deploy.sh" ]; then
            echo "ERROR: scripts/ai-deploy.sh does not exist in the repository!"
            exit 1
          fi

      - name: Upload Docker Compose files to AI Service
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AI_SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "./docker-compose.prod.yaml"
          target: "/home/opc/app"
          overwrite: true

      - name: Upload improved deploy script to AI Service
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AI_SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "scripts/ai-deploy.sh"
          target: "/home/opc"
          strip_components: 1
          overwrite: true

      - name: SSH Deploy to AI Service
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.AI_SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          envs: HF_TOKEN,GITHUB_SHA
          script: |
            echo "Remote directory structure:"
            ls -la /home/opc

            echo "App directory structure:"
            mkdir -p /home/opc/app
            ls -la /home/opc/app

            cd /home/opc
            # Fix any potential line ending issues
            sed -i 's/\r$//' ai-deploy.sh

            # Ensure the shebang line is correct
            sed -i '1s/^.*$/\#!\/bin\/bash/' ai-deploy.sh

            # Make deploy script executable
            chmod +x ai-deploy.sh

            # Verify the file exists and check its contents
            ls -la ai-deploy.sh
            head -n 5 ai-deploy.sh
            # Ensure app directory exists
            mkdir -p /home/opc/app
            # Verify Docker Compose files exist
            if [ ! -f "/home/opc/app/docker-compose.prod.yaml" ]; then
                echo "ERROR: docker-compose.prod.yaml not found in /home/opc/app"
                echo "Creating a simple docker-compose.prod.yaml file..."

                # Create a basic docker-compose.prod.yaml file
                cat > /home/opc/app/docker-compose.prod.yaml << 'ENDOFFILE'
                services:
                    ai-service:
                        image: lorddickson/ai-service:latest
                        ports:
                            - "50052:50052"
                        volumes:
                            - ai-model-cache:/root/.cache/huggingface
                        environment:
                            - PYTHONUNBUFFERED=1
                            - TRANSFORMERS_CACHE=/root/.cache/huggingface
                            - PYTHON_ENV=production
                        command: ["/opt/venv/bin/python", "main.py"]
                volumes:
                    ai-model-cache:
            ENDOFFILE

                echo "Created basic Docker Compose files"
            fi

            # Always force pull latest image before running deploy script
            docker pull lorddickson/ai-service:latest
            docker pull lorddickson/ai-service:slim

            # Run deploy script with environment variables
            HF_TOKEN=$HF_TOKEN GITHUB_SHA=$GITHUB_SHA ./ai-deploy.sh
