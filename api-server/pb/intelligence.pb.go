// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v4.25.3
// source: protobuf/intelligence.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnhanceTestimonialRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Text                 string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	TargetTone           string                 `protobuf:"bytes,2,opt,name=target_tone,json=targetTone,proto3" json:"target_tone,omitempty"` // professional, casual, etc.
	PreserveKeyMetrics   bool                   `protobuf:"varint,3,opt,name=preserve_key_metrics,json=preserveKeyMetrics,proto3" json:"preserve_key_metrics,omitempty"`
	KeyPointsToEmphasize []string               `protobuf:"bytes,4,rep,name=key_points_to_emphasize,json=keyPointsToEmphasize,proto3" json:"key_points_to_emphasize,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EnhanceTestimonialRequest) Reset() {
	*x = EnhanceTestimonialRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnhanceTestimonialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnhanceTestimonialRequest) ProtoMessage() {}

func (x *EnhanceTestimonialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnhanceTestimonialRequest.ProtoReflect.Descriptor instead.
func (*EnhanceTestimonialRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{0}
}

func (x *EnhanceTestimonialRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *EnhanceTestimonialRequest) GetTargetTone() string {
	if x != nil {
		return x.TargetTone
	}
	return ""
}

func (x *EnhanceTestimonialRequest) GetPreserveKeyMetrics() bool {
	if x != nil {
		return x.PreserveKeyMetrics
	}
	return false
}

func (x *EnhanceTestimonialRequest) GetKeyPointsToEmphasize() []string {
	if x != nil {
		return x.KeyPointsToEmphasize
	}
	return nil
}

type EnhanceTestimonialResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	EnhancedText          string                 `protobuf:"bytes,1,opt,name=enhanced_text,json=enhancedText,proto3" json:"enhanced_text,omitempty"`
	EnhancementConfidence float32                `protobuf:"fixed32,2,opt,name=enhancement_confidence,json=enhancementConfidence,proto3" json:"enhancement_confidence,omitempty"`
	ChangesMade           []string               `protobuf:"bytes,3,rep,name=changes_made,json=changesMade,proto3" json:"changes_made,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *EnhanceTestimonialResponse) Reset() {
	*x = EnhanceTestimonialResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnhanceTestimonialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnhanceTestimonialResponse) ProtoMessage() {}

func (x *EnhanceTestimonialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnhanceTestimonialResponse.ProtoReflect.Descriptor instead.
func (*EnhanceTestimonialResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{1}
}

func (x *EnhanceTestimonialResponse) GetEnhancedText() string {
	if x != nil {
		return x.EnhancedText
	}
	return ""
}

func (x *EnhanceTestimonialResponse) GetEnhancementConfidence() float32 {
	if x != nil {
		return x.EnhancementConfidence
	}
	return 0
}

func (x *EnhanceTestimonialResponse) GetChangesMade() []string {
	if x != nil {
		return x.ChangesMade
	}
	return nil
}

type AnalyzeSentimentRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Text             string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	IndustryContext  string                 `protobuf:"bytes,2,opt,name=industry_context,json=industryContext,proto3" json:"industry_context,omitempty"`
	AspectCategories []string               `protobuf:"bytes,3,rep,name=aspect_categories,json=aspectCategories,proto3" json:"aspect_categories,omitempty"` // product, service, support, etc.
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AnalyzeSentimentRequest) Reset() {
	*x = AnalyzeSentimentRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeSentimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeSentimentRequest) ProtoMessage() {}

func (x *AnalyzeSentimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeSentimentRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeSentimentRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyzeSentimentRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *AnalyzeSentimentRequest) GetIndustryContext() string {
	if x != nil {
		return x.IndustryContext
	}
	return ""
}

func (x *AnalyzeSentimentRequest) GetAspectCategories() []string {
	if x != nil {
		return x.AspectCategories
	}
	return nil
}

type AnalyzeSentimentResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SentimentScore float32                `protobuf:"fixed32,1,opt,name=sentiment_score,json=sentimentScore,proto3" json:"sentiment_score,omitempty"`
	Emotions       []*EmotionAnalysis     `protobuf:"bytes,2,rep,name=emotions,proto3" json:"emotions,omitempty"`
	Aspects        []*AspectAnalysis      `protobuf:"bytes,3,rep,name=aspects,proto3" json:"aspects,omitempty"`
	KeyPhrases     []string               `protobuf:"bytes,4,rep,name=key_phrases,json=keyPhrases,proto3" json:"key_phrases,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AnalyzeSentimentResponse) Reset() {
	*x = AnalyzeSentimentResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeSentimentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeSentimentResponse) ProtoMessage() {}

func (x *AnalyzeSentimentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeSentimentResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeSentimentResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{3}
}

func (x *AnalyzeSentimentResponse) GetSentimentScore() float32 {
	if x != nil {
		return x.SentimentScore
	}
	return 0
}

func (x *AnalyzeSentimentResponse) GetEmotions() []*EmotionAnalysis {
	if x != nil {
		return x.Emotions
	}
	return nil
}

func (x *AnalyzeSentimentResponse) GetAspects() []*AspectAnalysis {
	if x != nil {
		return x.Aspects
	}
	return nil
}

func (x *AnalyzeSentimentResponse) GetKeyPhrases() []string {
	if x != nil {
		return x.KeyPhrases
	}
	return nil
}

type DetectFakeTestimonialRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Text                 string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	UserData             *UserMetadata          `protobuf:"bytes,2,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	PreviousTestimonials []string               `protobuf:"bytes,3,rep,name=previous_testimonials,json=previousTestimonials,proto3" json:"previous_testimonials,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DetectFakeTestimonialRequest) Reset() {
	*x = DetectFakeTestimonialRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetectFakeTestimonialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectFakeTestimonialRequest) ProtoMessage() {}

func (x *DetectFakeTestimonialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectFakeTestimonialRequest.ProtoReflect.Descriptor instead.
func (*DetectFakeTestimonialRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{4}
}

func (x *DetectFakeTestimonialRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DetectFakeTestimonialRequest) GetUserData() *UserMetadata {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *DetectFakeTestimonialRequest) GetPreviousTestimonials() []string {
	if x != nil {
		return x.PreviousTestimonials
	}
	return nil
}

type DetectFakeTestimonialResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AuthenticityScore float32                `protobuf:"fixed32,1,opt,name=authenticity_score,json=authenticityScore,proto3" json:"authenticity_score,omitempty"`
	RiskFactors       []string               `protobuf:"bytes,2,rep,name=risk_factors,json=riskFactors,proto3" json:"risk_factors,omitempty"`
	FeatureScores     map[string]float32     `protobuf:"bytes,3,rep,name=feature_scores,json=featureScores,proto3" json:"feature_scores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *DetectFakeTestimonialResponse) Reset() {
	*x = DetectFakeTestimonialResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DetectFakeTestimonialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectFakeTestimonialResponse) ProtoMessage() {}

func (x *DetectFakeTestimonialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectFakeTestimonialResponse.ProtoReflect.Descriptor instead.
func (*DetectFakeTestimonialResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{5}
}

func (x *DetectFakeTestimonialResponse) GetAuthenticityScore() float32 {
	if x != nil {
		return x.AuthenticityScore
	}
	return 0
}

func (x *DetectFakeTestimonialResponse) GetRiskFactors() []string {
	if x != nil {
		return x.RiskFactors
	}
	return nil
}

func (x *DetectFakeTestimonialResponse) GetFeatureScores() map[string]float32 {
	if x != nil {
		return x.FeatureScores
	}
	return nil
}

type TranslateTestimonialRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Text            string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	SourceLanguage  string                 `protobuf:"bytes,2,opt,name=source_language,json=sourceLanguage,proto3" json:"source_language,omitempty"`
	TargetLanguage  string                 `protobuf:"bytes,3,opt,name=target_language,json=targetLanguage,proto3" json:"target_language,omitempty"`
	PreserveTone    bool                   `protobuf:"varint,4,opt,name=preserve_tone,json=preserveTone,proto3" json:"preserve_tone,omitempty"`
	IndustryContext string                 `protobuf:"bytes,5,opt,name=industry_context,json=industryContext,proto3" json:"industry_context,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TranslateTestimonialRequest) Reset() {
	*x = TranslateTestimonialRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranslateTestimonialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateTestimonialRequest) ProtoMessage() {}

func (x *TranslateTestimonialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateTestimonialRequest.ProtoReflect.Descriptor instead.
func (*TranslateTestimonialRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{6}
}

func (x *TranslateTestimonialRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *TranslateTestimonialRequest) GetSourceLanguage() string {
	if x != nil {
		return x.SourceLanguage
	}
	return ""
}

func (x *TranslateTestimonialRequest) GetTargetLanguage() string {
	if x != nil {
		return x.TargetLanguage
	}
	return ""
}

func (x *TranslateTestimonialRequest) GetPreserveTone() bool {
	if x != nil {
		return x.PreserveTone
	}
	return false
}

func (x *TranslateTestimonialRequest) GetIndustryContext() string {
	if x != nil {
		return x.IndustryContext
	}
	return ""
}

type TranslateTestimonialResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	TranslatedText        string                 `protobuf:"bytes,1,opt,name=translated_text,json=translatedText,proto3" json:"translated_text,omitempty"`
	TranslationConfidence float32                `protobuf:"fixed32,2,opt,name=translation_confidence,json=translationConfidence,proto3" json:"translation_confidence,omitempty"`
	CulturalAdaptations   []string               `protobuf:"bytes,3,rep,name=cultural_adaptations,json=culturalAdaptations,proto3" json:"cultural_adaptations,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *TranslateTestimonialResponse) Reset() {
	*x = TranslateTestimonialResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranslateTestimonialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateTestimonialResponse) ProtoMessage() {}

func (x *TranslateTestimonialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateTestimonialResponse.ProtoReflect.Descriptor instead.
func (*TranslateTestimonialResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{7}
}

func (x *TranslateTestimonialResponse) GetTranslatedText() string {
	if x != nil {
		return x.TranslatedText
	}
	return ""
}

func (x *TranslateTestimonialResponse) GetTranslationConfidence() float32 {
	if x != nil {
		return x.TranslationConfidence
	}
	return 0
}

func (x *TranslateTestimonialResponse) GetCulturalAdaptations() []string {
	if x != nil {
		return x.CulturalAdaptations
	}
	return nil
}

type GenerateVideoTestimonialRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Text           string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	AvatarPrefs    *AvatarPreferences     `protobuf:"bytes,2,opt,name=avatar_prefs,json=avatarPrefs,proto3" json:"avatar_prefs,omitempty"`
	VoiceStyle     string                 `protobuf:"bytes,3,opt,name=voice_style,json=voiceStyle,proto3" json:"voice_style,omitempty"`
	EmotionMarkers []*EmotionTimestamp    `protobuf:"bytes,4,rep,name=emotion_markers,json=emotionMarkers,proto3" json:"emotion_markers,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GenerateVideoTestimonialRequest) Reset() {
	*x = GenerateVideoTestimonialRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateVideoTestimonialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateVideoTestimonialRequest) ProtoMessage() {}

func (x *GenerateVideoTestimonialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateVideoTestimonialRequest.ProtoReflect.Descriptor instead.
func (*GenerateVideoTestimonialRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{8}
}

func (x *GenerateVideoTestimonialRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GenerateVideoTestimonialRequest) GetAvatarPrefs() *AvatarPreferences {
	if x != nil {
		return x.AvatarPrefs
	}
	return nil
}

func (x *GenerateVideoTestimonialRequest) GetVoiceStyle() string {
	if x != nil {
		return x.VoiceStyle
	}
	return ""
}

func (x *GenerateVideoTestimonialRequest) GetEmotionMarkers() []*EmotionTimestamp {
	if x != nil {
		return x.EmotionMarkers
	}
	return nil
}

type GenerateVideoTestimonialResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	VideoUrl          string                 `protobuf:"bytes,1,opt,name=video_url,json=videoUrl,proto3" json:"video_url,omitempty"`
	ThumbnailUrl      string                 `protobuf:"bytes,2,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	GenerationQuality float32                `protobuf:"fixed32,3,opt,name=generation_quality,json=generationQuality,proto3" json:"generation_quality,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GenerateVideoTestimonialResponse) Reset() {
	*x = GenerateVideoTestimonialResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateVideoTestimonialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateVideoTestimonialResponse) ProtoMessage() {}

func (x *GenerateVideoTestimonialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateVideoTestimonialResponse.ProtoReflect.Descriptor instead.
func (*GenerateVideoTestimonialResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{9}
}

func (x *GenerateVideoTestimonialResponse) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *GenerateVideoTestimonialResponse) GetThumbnailUrl() string {
	if x != nil {
		return x.ThumbnailUrl
	}
	return ""
}

func (x *GenerateVideoTestimonialResponse) GetGenerationQuality() float32 {
	if x != nil {
		return x.GenerationQuality
	}
	return 0
}

type GenerateVoiceTestimonialRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	VoiceId       string                 `protobuf:"bytes,2,opt,name=voice_id,json=voiceId,proto3" json:"voice_id,omitempty"`
	EmotionPoints []*EmotionMarker       `protobuf:"bytes,3,rep,name=emotion_points,json=emotionPoints,proto3" json:"emotion_points,omitempty"`
	Preferences   *AudioPreferences      `protobuf:"bytes,4,opt,name=preferences,proto3" json:"preferences,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateVoiceTestimonialRequest) Reset() {
	*x = GenerateVoiceTestimonialRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateVoiceTestimonialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateVoiceTestimonialRequest) ProtoMessage() {}

func (x *GenerateVoiceTestimonialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateVoiceTestimonialRequest.ProtoReflect.Descriptor instead.
func (*GenerateVoiceTestimonialRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{10}
}

func (x *GenerateVoiceTestimonialRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *GenerateVoiceTestimonialRequest) GetVoiceId() string {
	if x != nil {
		return x.VoiceId
	}
	return ""
}

func (x *GenerateVoiceTestimonialRequest) GetEmotionPoints() []*EmotionMarker {
	if x != nil {
		return x.EmotionPoints
	}
	return nil
}

func (x *GenerateVoiceTestimonialRequest) GetPreferences() *AudioPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type GenerateVoiceTestimonialResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	AudioUrl             string                 `protobuf:"bytes,1,opt,name=audio_url,json=audioUrl,proto3" json:"audio_url,omitempty"`
	EmotionConfidence    map[string]float32     `protobuf:"bytes,2,rep,name=emotion_confidence,json=emotionConfidence,proto3" json:"emotion_confidence,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	VoiceNaturalityScore float32                `protobuf:"fixed32,3,opt,name=voice_naturality_score,json=voiceNaturalityScore,proto3" json:"voice_naturality_score,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GenerateVoiceTestimonialResponse) Reset() {
	*x = GenerateVoiceTestimonialResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateVoiceTestimonialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateVoiceTestimonialResponse) ProtoMessage() {}

func (x *GenerateVoiceTestimonialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateVoiceTestimonialResponse.ProtoReflect.Descriptor instead.
func (*GenerateVoiceTestimonialResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{11}
}

func (x *GenerateVoiceTestimonialResponse) GetAudioUrl() string {
	if x != nil {
		return x.AudioUrl
	}
	return ""
}

func (x *GenerateVoiceTestimonialResponse) GetEmotionConfidence() map[string]float32 {
	if x != nil {
		return x.EmotionConfidence
	}
	return nil
}

func (x *GenerateVoiceTestimonialResponse) GetVoiceNaturalityScore() float32 {
	if x != nil {
		return x.VoiceNaturalityScore
	}
	return 0
}

type GenerateStoryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TestimonialIds []string               `protobuf:"bytes,1,rep,name=testimonial_ids,json=testimonialIds,proto3" json:"testimonial_ids,omitempty"`
	NarrativeStyle string                 `protobuf:"bytes,2,opt,name=narrative_style,json=narrativeStyle,proto3" json:"narrative_style,omitempty"`
	KeyThemes      []string               `protobuf:"bytes,3,rep,name=key_themes,json=keyThemes,proto3" json:"key_themes,omitempty"`
	Preferences    *StoryPreferences      `protobuf:"bytes,4,opt,name=preferences,proto3" json:"preferences,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GenerateStoryRequest) Reset() {
	*x = GenerateStoryRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateStoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateStoryRequest) ProtoMessage() {}

func (x *GenerateStoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateStoryRequest.ProtoReflect.Descriptor instead.
func (*GenerateStoryRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{12}
}

func (x *GenerateStoryRequest) GetTestimonialIds() []string {
	if x != nil {
		return x.TestimonialIds
	}
	return nil
}

func (x *GenerateStoryRequest) GetNarrativeStyle() string {
	if x != nil {
		return x.NarrativeStyle
	}
	return ""
}

func (x *GenerateStoryRequest) GetKeyThemes() []string {
	if x != nil {
		return x.KeyThemes
	}
	return nil
}

func (x *GenerateStoryRequest) GetPreferences() *StoryPreferences {
	if x != nil {
		return x.Preferences
	}
	return nil
}

type GenerateStoryResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	StoryText          string                 `protobuf:"bytes,1,opt,name=story_text,json=storyText,proto3" json:"story_text,omitempty"`
	SourceTestimonials []string               `protobuf:"bytes,2,rep,name=source_testimonials,json=sourceTestimonials,proto3" json:"source_testimonials,omitempty"`
	Themes             []*ThemeAnalysis       `protobuf:"bytes,3,rep,name=themes,proto3" json:"themes,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GenerateStoryResponse) Reset() {
	*x = GenerateStoryResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateStoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateStoryResponse) ProtoMessage() {}

func (x *GenerateStoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateStoryResponse.ProtoReflect.Descriptor instead.
func (*GenerateStoryResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{13}
}

func (x *GenerateStoryResponse) GetStoryText() string {
	if x != nil {
		return x.StoryText
	}
	return ""
}

func (x *GenerateStoryResponse) GetSourceTestimonials() []string {
	if x != nil {
		return x.SourceTestimonials
	}
	return nil
}

func (x *GenerateStoryResponse) GetThemes() []*ThemeAnalysis {
	if x != nil {
		return x.Themes
	}
	return nil
}

type GenerateAutoReplyRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TestimonialText    string                 `protobuf:"bytes,1,opt,name=testimonial_text,json=testimonialText,proto3" json:"testimonial_text,omitempty"`
	BrandVoice         string                 `protobuf:"bytes,2,opt,name=brand_voice,json=brandVoice,proto3" json:"brand_voice,omitempty"`
	SentimentScore     float32                `protobuf:"fixed32,3,opt,name=sentiment_score,json=sentimentScore,proto3" json:"sentiment_score,omitempty"`
	KeyPointsToAddress []string               `protobuf:"bytes,4,rep,name=key_points_to_address,json=keyPointsToAddress,proto3" json:"key_points_to_address,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GenerateAutoReplyRequest) Reset() {
	*x = GenerateAutoReplyRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateAutoReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAutoReplyRequest) ProtoMessage() {}

func (x *GenerateAutoReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAutoReplyRequest.ProtoReflect.Descriptor instead.
func (*GenerateAutoReplyRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{14}
}

func (x *GenerateAutoReplyRequest) GetTestimonialText() string {
	if x != nil {
		return x.TestimonialText
	}
	return ""
}

func (x *GenerateAutoReplyRequest) GetBrandVoice() string {
	if x != nil {
		return x.BrandVoice
	}
	return ""
}

func (x *GenerateAutoReplyRequest) GetSentimentScore() float32 {
	if x != nil {
		return x.SentimentScore
	}
	return 0
}

func (x *GenerateAutoReplyRequest) GetKeyPointsToAddress() []string {
	if x != nil {
		return x.KeyPointsToAddress
	}
	return nil
}

type GenerateAutoReplyResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReplyText       string                 `protobuf:"bytes,1,opt,name=reply_text,json=replyText,proto3" json:"reply_text,omitempty"`
	EmpathyScore    float32                `protobuf:"fixed32,2,opt,name=empathy_score,json=empathyScore,proto3" json:"empathy_score,omitempty"`
	AddressedPoints []string               `protobuf:"bytes,3,rep,name=addressed_points,json=addressedPoints,proto3" json:"addressed_points,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GenerateAutoReplyResponse) Reset() {
	*x = GenerateAutoReplyResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateAutoReplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAutoReplyResponse) ProtoMessage() {}

func (x *GenerateAutoReplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAutoReplyResponse.ProtoReflect.Descriptor instead.
func (*GenerateAutoReplyResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{15}
}

func (x *GenerateAutoReplyResponse) GetReplyText() string {
	if x != nil {
		return x.ReplyText
	}
	return ""
}

func (x *GenerateAutoReplyResponse) GetEmpathyScore() float32 {
	if x != nil {
		return x.EmpathyScore
	}
	return 0
}

func (x *GenerateAutoReplyResponse) GetAddressedPoints() []string {
	if x != nil {
		return x.AddressedPoints
	}
	return nil
}

type CompetitorAnalysisRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CompetitorTestimonials []string               `protobuf:"bytes,1,rep,name=competitor_testimonials,json=competitorTestimonials,proto3" json:"competitor_testimonials,omitempty"`
	Industry               string                 `protobuf:"bytes,2,opt,name=industry,proto3" json:"industry,omitempty"`
	FeatureCategories      []string               `protobuf:"bytes,3,rep,name=feature_categories,json=featureCategories,proto3" json:"feature_categories,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CompetitorAnalysisRequest) Reset() {
	*x = CompetitorAnalysisRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompetitorAnalysisRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitorAnalysisRequest) ProtoMessage() {}

func (x *CompetitorAnalysisRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitorAnalysisRequest.ProtoReflect.Descriptor instead.
func (*CompetitorAnalysisRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{16}
}

func (x *CompetitorAnalysisRequest) GetCompetitorTestimonials() []string {
	if x != nil {
		return x.CompetitorTestimonials
	}
	return nil
}

func (x *CompetitorAnalysisRequest) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *CompetitorAnalysisRequest) GetFeatureCategories() []string {
	if x != nil {
		return x.FeatureCategories
	}
	return nil
}

type CompetitorAnalysisResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Insights            []*CompetitorInsight   `protobuf:"bytes,1,rep,name=insights,proto3" json:"insights,omitempty"`
	SentimentComparison map[string]float32     `protobuf:"bytes,2,rep,name=sentiment_comparison,json=sentimentComparison,proto3" json:"sentiment_comparison,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	FeatureAnalysis     []*FeatureComparison   `protobuf:"bytes,3,rep,name=feature_analysis,json=featureAnalysis,proto3" json:"feature_analysis,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CompetitorAnalysisResponse) Reset() {
	*x = CompetitorAnalysisResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompetitorAnalysisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitorAnalysisResponse) ProtoMessage() {}

func (x *CompetitorAnalysisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitorAnalysisResponse.ProtoReflect.Descriptor instead.
func (*CompetitorAnalysisResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{17}
}

func (x *CompetitorAnalysisResponse) GetInsights() []*CompetitorInsight {
	if x != nil {
		return x.Insights
	}
	return nil
}

func (x *CompetitorAnalysisResponse) GetSentimentComparison() map[string]float32 {
	if x != nil {
		return x.SentimentComparison
	}
	return nil
}

func (x *CompetitorAnalysisResponse) GetFeatureAnalysis() []*FeatureComparison {
	if x != nil {
		return x.FeatureAnalysis
	}
	return nil
}

type SentimentPredictionRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	HistoricalData      []*HistoricalSentiment `protobuf:"bytes,1,rep,name=historical_data,json=historicalData,proto3" json:"historical_data,omitempty"`
	PredictionTimeframe int32                  `protobuf:"varint,2,opt,name=prediction_timeframe,json=predictionTimeframe,proto3" json:"prediction_timeframe,omitempty"`
	ExternalFactors     []string               `protobuf:"bytes,3,rep,name=external_factors,json=externalFactors,proto3" json:"external_factors,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SentimentPredictionRequest) Reset() {
	*x = SentimentPredictionRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentimentPredictionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentPredictionRequest) ProtoMessage() {}

func (x *SentimentPredictionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentPredictionRequest.ProtoReflect.Descriptor instead.
func (*SentimentPredictionRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{18}
}

func (x *SentimentPredictionRequest) GetHistoricalData() []*HistoricalSentiment {
	if x != nil {
		return x.HistoricalData
	}
	return nil
}

func (x *SentimentPredictionRequest) GetPredictionTimeframe() int32 {
	if x != nil {
		return x.PredictionTimeframe
	}
	return 0
}

func (x *SentimentPredictionRequest) GetExternalFactors() []string {
	if x != nil {
		return x.ExternalFactors
	}
	return nil
}

type SentimentPredictionResponse struct {
	state                protoimpl.MessageState   `protogen:"open.v1"`
	Predictions          []*TimestampedPrediction `protobuf:"bytes,1,rep,name=predictions,proto3" json:"predictions,omitempty"`
	ContributingFactors  []*TrendFactor           `protobuf:"bytes,2,rep,name=contributing_factors,json=contributingFactors,proto3" json:"contributing_factors,omitempty"`
	PredictionConfidence float32                  `protobuf:"fixed32,3,opt,name=prediction_confidence,json=predictionConfidence,proto3" json:"prediction_confidence,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *SentimentPredictionResponse) Reset() {
	*x = SentimentPredictionResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SentimentPredictionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentimentPredictionResponse) ProtoMessage() {}

func (x *SentimentPredictionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentimentPredictionResponse.ProtoReflect.Descriptor instead.
func (*SentimentPredictionResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{19}
}

func (x *SentimentPredictionResponse) GetPredictions() []*TimestampedPrediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *SentimentPredictionResponse) GetContributingFactors() []*TrendFactor {
	if x != nil {
		return x.ContributingFactors
	}
	return nil
}

func (x *SentimentPredictionResponse) GetPredictionConfidence() float32 {
	if x != nil {
		return x.PredictionConfidence
	}
	return 0
}

type PlacementRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TestimonialId   string                 `protobuf:"bytes,1,opt,name=testimonial_id,json=testimonialId,proto3" json:"testimonial_id,omitempty"`
	PageContext     string                 `protobuf:"bytes,2,opt,name=page_context,json=pageContext,proto3" json:"page_context,omitempty"`
	TargetAudience  *UserSegment           `protobuf:"bytes,3,opt,name=target_audience,json=targetAudience,proto3" json:"target_audience,omitempty"`
	ConversionGoals []string               `protobuf:"bytes,4,rep,name=conversion_goals,json=conversionGoals,proto3" json:"conversion_goals,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PlacementRequest) Reset() {
	*x = PlacementRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlacementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementRequest) ProtoMessage() {}

func (x *PlacementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementRequest.ProtoReflect.Descriptor instead.
func (*PlacementRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{20}
}

func (x *PlacementRequest) GetTestimonialId() string {
	if x != nil {
		return x.TestimonialId
	}
	return ""
}

func (x *PlacementRequest) GetPageContext() string {
	if x != nil {
		return x.PageContext
	}
	return ""
}

func (x *PlacementRequest) GetTargetAudience() *UserSegment {
	if x != nil {
		return x.TargetAudience
	}
	return nil
}

func (x *PlacementRequest) GetConversionGoals() []string {
	if x != nil {
		return x.ConversionGoals
	}
	return nil
}

type PlacementResponse struct {
	state                   protoimpl.MessageState     `protogen:"open.v1"`
	Recommendations         []*PlacementRecommendation `protobuf:"bytes,1,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
	PredictedEngagement     map[string]float32         `protobuf:"bytes,2,rep,name=predicted_engagement,json=predictedEngagement,proto3" json:"predicted_engagement,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	OptimizationSuggestions []string                   `protobuf:"bytes,3,rep,name=optimization_suggestions,json=optimizationSuggestions,proto3" json:"optimization_suggestions,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PlacementResponse) Reset() {
	*x = PlacementResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlacementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementResponse) ProtoMessage() {}

func (x *PlacementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementResponse.ProtoReflect.Descriptor instead.
func (*PlacementResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{21}
}

func (x *PlacementResponse) GetRecommendations() []*PlacementRecommendation {
	if x != nil {
		return x.Recommendations
	}
	return nil
}

func (x *PlacementResponse) GetPredictedEngagement() map[string]float32 {
	if x != nil {
		return x.PredictedEngagement
	}
	return nil
}

func (x *PlacementResponse) GetOptimizationSuggestions() []string {
	if x != nil {
		return x.OptimizationSuggestions
	}
	return nil
}

type EmotionAnalysis struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Emotion       string                 `protobuf:"bytes,1,opt,name=emotion,proto3" json:"emotion,omitempty"`
	Intensity     float32                `protobuf:"fixed32,2,opt,name=intensity,proto3" json:"intensity,omitempty"`
	Triggers      []string               `protobuf:"bytes,3,rep,name=triggers,proto3" json:"triggers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmotionAnalysis) Reset() {
	*x = EmotionAnalysis{}
	mi := &file_protobuf_intelligence_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmotionAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionAnalysis) ProtoMessage() {}

func (x *EmotionAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionAnalysis.ProtoReflect.Descriptor instead.
func (*EmotionAnalysis) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{22}
}

func (x *EmotionAnalysis) GetEmotion() string {
	if x != nil {
		return x.Emotion
	}
	return ""
}

func (x *EmotionAnalysis) GetIntensity() float32 {
	if x != nil {
		return x.Intensity
	}
	return 0
}

func (x *EmotionAnalysis) GetTriggers() []string {
	if x != nil {
		return x.Triggers
	}
	return nil
}

type AspectAnalysis struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Aspect         string                 `protobuf:"bytes,1,opt,name=aspect,proto3" json:"aspect,omitempty"`
	SentimentScore float32                `protobuf:"fixed32,2,opt,name=sentiment_score,json=sentimentScore,proto3" json:"sentiment_score,omitempty"`
	KeyPhrases     []string               `protobuf:"bytes,3,rep,name=key_phrases,json=keyPhrases,proto3" json:"key_phrases,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *AspectAnalysis) Reset() {
	*x = AspectAnalysis{}
	mi := &file_protobuf_intelligence_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AspectAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AspectAnalysis) ProtoMessage() {}

func (x *AspectAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AspectAnalysis.ProtoReflect.Descriptor instead.
func (*AspectAnalysis) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{23}
}

func (x *AspectAnalysis) GetAspect() string {
	if x != nil {
		return x.Aspect
	}
	return ""
}

func (x *AspectAnalysis) GetSentimentScore() float32 {
	if x != nil {
		return x.SentimentScore
	}
	return 0
}

func (x *AspectAnalysis) GetKeyPhrases() []string {
	if x != nil {
		return x.KeyPhrases
	}
	return nil
}

type UserMetadata struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccountAge       string                 `protobuf:"bytes,2,opt,name=account_age,json=accountAge,proto3" json:"account_age,omitempty"`
	PreviousActivity []string               `protobuf:"bytes,3,rep,name=previous_activity,json=previousActivity,proto3" json:"previous_activity,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UserMetadata) Reset() {
	*x = UserMetadata{}
	mi := &file_protobuf_intelligence_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetadata) ProtoMessage() {}

func (x *UserMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetadata.ProtoReflect.Descriptor instead.
func (*UserMetadata) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{24}
}

func (x *UserMetadata) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserMetadata) GetAccountAge() string {
	if x != nil {
		return x.AccountAge
	}
	return ""
}

func (x *UserMetadata) GetPreviousActivity() []string {
	if x != nil {
		return x.PreviousActivity
	}
	return nil
}

type AvatarPreferences struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Gender           string                 `protobuf:"bytes,1,opt,name=gender,proto3" json:"gender,omitempty"`
	AgeRange         string                 `protobuf:"bytes,2,opt,name=age_range,json=ageRange,proto3" json:"age_range,omitempty"`
	Ethnicity        string                 `protobuf:"bytes,3,opt,name=ethnicity,proto3" json:"ethnicity,omitempty"`
	StylePreferences []string               `protobuf:"bytes,4,rep,name=style_preferences,json=stylePreferences,proto3" json:"style_preferences,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AvatarPreferences) Reset() {
	*x = AvatarPreferences{}
	mi := &file_protobuf_intelligence_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarPreferences) ProtoMessage() {}

func (x *AvatarPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarPreferences.ProtoReflect.Descriptor instead.
func (*AvatarPreferences) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{25}
}

func (x *AvatarPreferences) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *AvatarPreferences) GetAgeRange() string {
	if x != nil {
		return x.AgeRange
	}
	return ""
}

func (x *AvatarPreferences) GetEthnicity() string {
	if x != nil {
		return x.Ethnicity
	}
	return ""
}

func (x *AvatarPreferences) GetStylePreferences() []string {
	if x != nil {
		return x.StylePreferences
	}
	return nil
}

type EmotionTimestamp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     float32                `protobuf:"fixed32,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Emotion       string                 `protobuf:"bytes,2,opt,name=emotion,proto3" json:"emotion,omitempty"`
	Intensity     float32                `protobuf:"fixed32,3,opt,name=intensity,proto3" json:"intensity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmotionTimestamp) Reset() {
	*x = EmotionTimestamp{}
	mi := &file_protobuf_intelligence_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmotionTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionTimestamp) ProtoMessage() {}

func (x *EmotionTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionTimestamp.ProtoReflect.Descriptor instead.
func (*EmotionTimestamp) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{26}
}

func (x *EmotionTimestamp) GetTimestamp() float32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EmotionTimestamp) GetEmotion() string {
	if x != nil {
		return x.Emotion
	}
	return ""
}

func (x *EmotionTimestamp) GetIntensity() float32 {
	if x != nil {
		return x.Intensity
	}
	return 0
}

type EmotionMarker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     float32                `protobuf:"fixed32,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Emotion       string                 `protobuf:"bytes,2,opt,name=emotion,proto3" json:"emotion,omitempty"`
	Intensity     float32                `protobuf:"fixed32,3,opt,name=intensity,proto3" json:"intensity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmotionMarker) Reset() {
	*x = EmotionMarker{}
	mi := &file_protobuf_intelligence_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmotionMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionMarker) ProtoMessage() {}

func (x *EmotionMarker) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionMarker.ProtoReflect.Descriptor instead.
func (*EmotionMarker) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{27}
}

func (x *EmotionMarker) GetTimestamp() float32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EmotionMarker) GetEmotion() string {
	if x != nil {
		return x.Emotion
	}
	return ""
}

func (x *EmotionMarker) GetIntensity() float32 {
	if x != nil {
		return x.Intensity
	}
	return 0
}

type AudioPreferences struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VoiceStyle    string                 `protobuf:"bytes,1,opt,name=voice_style,json=voiceStyle,proto3" json:"voice_style,omitempty"`
	SpeakingRate  float32                `protobuf:"fixed32,2,opt,name=speaking_rate,json=speakingRate,proto3" json:"speaking_rate,omitempty"`
	Pitch         float32                `protobuf:"fixed32,3,opt,name=pitch,proto3" json:"pitch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioPreferences) Reset() {
	*x = AudioPreferences{}
	mi := &file_protobuf_intelligence_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioPreferences) ProtoMessage() {}

func (x *AudioPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioPreferences.ProtoReflect.Descriptor instead.
func (*AudioPreferences) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{28}
}

func (x *AudioPreferences) GetVoiceStyle() string {
	if x != nil {
		return x.VoiceStyle
	}
	return ""
}

func (x *AudioPreferences) GetSpeakingRate() float32 {
	if x != nil {
		return x.SpeakingRate
	}
	return 0
}

func (x *AudioPreferences) GetPitch() float32 {
	if x != nil {
		return x.Pitch
	}
	return 0
}

type StoryPreferences struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tone          string                 `protobuf:"bytes,1,opt,name=tone,proto3" json:"tone,omitempty"`
	TargetLength  int32                  `protobuf:"varint,2,opt,name=target_length,json=targetLength,proto3" json:"target_length,omitempty"`
	FocusAreas    []string               `protobuf:"bytes,3,rep,name=focus_areas,json=focusAreas,proto3" json:"focus_areas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoryPreferences) Reset() {
	*x = StoryPreferences{}
	mi := &file_protobuf_intelligence_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoryPreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoryPreferences) ProtoMessage() {}

func (x *StoryPreferences) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoryPreferences.ProtoReflect.Descriptor instead.
func (*StoryPreferences) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{29}
}

func (x *StoryPreferences) GetTone() string {
	if x != nil {
		return x.Tone
	}
	return ""
}

func (x *StoryPreferences) GetTargetLength() int32 {
	if x != nil {
		return x.TargetLength
	}
	return 0
}

func (x *StoryPreferences) GetFocusAreas() []string {
	if x != nil {
		return x.FocusAreas
	}
	return nil
}

type ThemeAnalysis struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Theme            string                 `protobuf:"bytes,1,opt,name=theme,proto3" json:"theme,omitempty"`
	Prominence       float32                `protobuf:"fixed32,2,opt,name=prominence,proto3" json:"prominence,omitempty"`
	SupportingQuotes []string               `protobuf:"bytes,3,rep,name=supporting_quotes,json=supportingQuotes,proto3" json:"supporting_quotes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ThemeAnalysis) Reset() {
	*x = ThemeAnalysis{}
	mi := &file_protobuf_intelligence_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThemeAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThemeAnalysis) ProtoMessage() {}

func (x *ThemeAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThemeAnalysis.ProtoReflect.Descriptor instead.
func (*ThemeAnalysis) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{30}
}

func (x *ThemeAnalysis) GetTheme() string {
	if x != nil {
		return x.Theme
	}
	return ""
}

func (x *ThemeAnalysis) GetProminence() float32 {
	if x != nil {
		return x.Prominence
	}
	return 0
}

func (x *ThemeAnalysis) GetSupportingQuotes() []string {
	if x != nil {
		return x.SupportingQuotes
	}
	return nil
}

type CompetitorInsight struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Competitor    string                 `protobuf:"bytes,1,opt,name=competitor,proto3" json:"competitor,omitempty"`
	Strengths     []string               `protobuf:"bytes,2,rep,name=strengths,proto3" json:"strengths,omitempty"`
	Weaknesses    []string               `protobuf:"bytes,3,rep,name=weaknesses,proto3" json:"weaknesses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompetitorInsight) Reset() {
	*x = CompetitorInsight{}
	mi := &file_protobuf_intelligence_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompetitorInsight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitorInsight) ProtoMessage() {}

func (x *CompetitorInsight) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitorInsight.ProtoReflect.Descriptor instead.
func (*CompetitorInsight) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{31}
}

func (x *CompetitorInsight) GetCompetitor() string {
	if x != nil {
		return x.Competitor
	}
	return ""
}

func (x *CompetitorInsight) GetStrengths() []string {
	if x != nil {
		return x.Strengths
	}
	return nil
}

func (x *CompetitorInsight) GetWeaknesses() []string {
	if x != nil {
		return x.Weaknesses
	}
	return nil
}

type FeatureComparison struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Feature          string                 `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	CompetitorScores map[string]float32     `protobuf:"bytes,2,rep,name=competitor_scores,json=competitorScores,proto3" json:"competitor_scores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	KeyDifferences   []string               `protobuf:"bytes,3,rep,name=key_differences,json=keyDifferences,proto3" json:"key_differences,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FeatureComparison) Reset() {
	*x = FeatureComparison{}
	mi := &file_protobuf_intelligence_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureComparison) ProtoMessage() {}

func (x *FeatureComparison) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureComparison.ProtoReflect.Descriptor instead.
func (*FeatureComparison) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{32}
}

func (x *FeatureComparison) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *FeatureComparison) GetCompetitorScores() map[string]float32 {
	if x != nil {
		return x.CompetitorScores
	}
	return nil
}

func (x *FeatureComparison) GetKeyDifferences() []string {
	if x != nil {
		return x.KeyDifferences
	}
	return nil
}

type HistoricalSentiment struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SentimentScore    float32                `protobuf:"fixed32,2,opt,name=sentiment_score,json=sentimentScore,proto3" json:"sentiment_score,omitempty"`
	ContextualFactors []string               `protobuf:"bytes,3,rep,name=contextual_factors,json=contextualFactors,proto3" json:"contextual_factors,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HistoricalSentiment) Reset() {
	*x = HistoricalSentiment{}
	mi := &file_protobuf_intelligence_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoricalSentiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalSentiment) ProtoMessage() {}

func (x *HistoricalSentiment) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalSentiment.ProtoReflect.Descriptor instead.
func (*HistoricalSentiment) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{33}
}

func (x *HistoricalSentiment) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *HistoricalSentiment) GetSentimentScore() float32 {
	if x != nil {
		return x.SentimentScore
	}
	return 0
}

func (x *HistoricalSentiment) GetContextualFactors() []string {
	if x != nil {
		return x.ContextualFactors
	}
	return nil
}

type TimestampedPrediction struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Timestamp          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PredictedSentiment float32                `protobuf:"fixed32,2,opt,name=predicted_sentiment,json=predictedSentiment,proto3" json:"predicted_sentiment,omitempty"`
	ConfidenceInterval float32                `protobuf:"fixed32,3,opt,name=confidence_interval,json=confidenceInterval,proto3" json:"confidence_interval,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TimestampedPrediction) Reset() {
	*x = TimestampedPrediction{}
	mi := &file_protobuf_intelligence_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampedPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedPrediction) ProtoMessage() {}

func (x *TimestampedPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedPrediction.ProtoReflect.Descriptor instead.
func (*TimestampedPrediction) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{34}
}

func (x *TimestampedPrediction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TimestampedPrediction) GetPredictedSentiment() float32 {
	if x != nil {
		return x.PredictedSentiment
	}
	return 0
}

func (x *TimestampedPrediction) GetConfidenceInterval() float32 {
	if x != nil {
		return x.ConfidenceInterval
	}
	return 0
}

type TrendFactor struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Factor        string                 `protobuf:"bytes,1,opt,name=factor,proto3" json:"factor,omitempty"`
	ImpactWeight  float32                `protobuf:"fixed32,2,opt,name=impact_weight,json=impactWeight,proto3" json:"impact_weight,omitempty"`
	Explanation   string                 `protobuf:"bytes,3,opt,name=explanation,proto3" json:"explanation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrendFactor) Reset() {
	*x = TrendFactor{}
	mi := &file_protobuf_intelligence_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrendFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrendFactor) ProtoMessage() {}

func (x *TrendFactor) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrendFactor.ProtoReflect.Descriptor instead.
func (*TrendFactor) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{35}
}

func (x *TrendFactor) GetFactor() string {
	if x != nil {
		return x.Factor
	}
	return ""
}

func (x *TrendFactor) GetImpactWeight() float32 {
	if x != nil {
		return x.ImpactWeight
	}
	return 0
}

func (x *TrendFactor) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

type UserSegment struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Demographic     string                 `protobuf:"bytes,1,opt,name=demographic,proto3" json:"demographic,omitempty"`
	BehaviorPattern string                 `protobuf:"bytes,2,opt,name=behavior_pattern,json=behaviorPattern,proto3" json:"behavior_pattern,omitempty"`
	Interests       []string               `protobuf:"bytes,3,rep,name=interests,proto3" json:"interests,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UserSegment) Reset() {
	*x = UserSegment{}
	mi := &file_protobuf_intelligence_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSegment) ProtoMessage() {}

func (x *UserSegment) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSegment.ProtoReflect.Descriptor instead.
func (*UserSegment) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{36}
}

func (x *UserSegment) GetDemographic() string {
	if x != nil {
		return x.Demographic
	}
	return ""
}

func (x *UserSegment) GetBehaviorPattern() string {
	if x != nil {
		return x.BehaviorPattern
	}
	return ""
}

func (x *UserSegment) GetInterests() []string {
	if x != nil {
		return x.Interests
	}
	return nil
}

type PlacementRecommendation struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Location        string                 `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	ConfidenceScore float32                `protobuf:"fixed32,2,opt,name=confidence_score,json=confidenceScore,proto3" json:"confidence_score,omitempty"`
	Reasoning       []string               `protobuf:"bytes,3,rep,name=reasoning,proto3" json:"reasoning,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PlacementRecommendation) Reset() {
	*x = PlacementRecommendation{}
	mi := &file_protobuf_intelligence_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlacementRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementRecommendation) ProtoMessage() {}

func (x *PlacementRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementRecommendation.ProtoReflect.Descriptor instead.
func (*PlacementRecommendation) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{37}
}

func (x *PlacementRecommendation) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *PlacementRecommendation) GetConfidenceScore() float32 {
	if x != nil {
		return x.ConfidenceScore
	}
	return 0
}

func (x *PlacementRecommendation) GetReasoning() []string {
	if x != nil {
		return x.Reasoning
	}
	return nil
}

type JourneyStage struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	StageName           string                 `protobuf:"bytes,1,opt,name=stage_name,json=stageName,proto3" json:"stage_name,omitempty"`
	TestimonialExcerpts []string               `protobuf:"bytes,2,rep,name=testimonial_excerpts,json=testimonialExcerpts,proto3" json:"testimonial_excerpts,omitempty"`
	KeyOutcomes         []string               `protobuf:"bytes,3,rep,name=key_outcomes,json=keyOutcomes,proto3" json:"key_outcomes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *JourneyStage) Reset() {
	*x = JourneyStage{}
	mi := &file_protobuf_intelligence_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JourneyStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JourneyStage) ProtoMessage() {}

func (x *JourneyStage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JourneyStage.ProtoReflect.Descriptor instead.
func (*JourneyStage) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{38}
}

func (x *JourneyStage) GetStageName() string {
	if x != nil {
		return x.StageName
	}
	return ""
}

func (x *JourneyStage) GetTestimonialExcerpts() []string {
	if x != nil {
		return x.TestimonialExcerpts
	}
	return nil
}

func (x *JourneyStage) GetKeyOutcomes() []string {
	if x != nil {
		return x.KeyOutcomes
	}
	return nil
}

type EmotionalMilestone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Emotion       string                 `protobuf:"bytes,1,opt,name=emotion,proto3" json:"emotion,omitempty"`
	Trigger       string                 `protobuf:"bytes,2,opt,name=trigger,proto3" json:"trigger,omitempty"`
	Resolution    string                 `protobuf:"bytes,3,opt,name=resolution,proto3" json:"resolution,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmotionalMilestone) Reset() {
	*x = EmotionalMilestone{}
	mi := &file_protobuf_intelligence_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmotionalMilestone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionalMilestone) ProtoMessage() {}

func (x *EmotionalMilestone) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionalMilestone.ProtoReflect.Descriptor instead.
func (*EmotionalMilestone) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{39}
}

func (x *EmotionalMilestone) GetEmotion() string {
	if x != nil {
		return x.Emotion
	}
	return ""
}

func (x *EmotionalMilestone) GetTrigger() string {
	if x != nil {
		return x.Trigger
	}
	return ""
}

func (x *EmotionalMilestone) GetResolution() string {
	if x != nil {
		return x.Resolution
	}
	return ""
}

type MetricMilestone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MetricName    string                 `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	Value         float64                `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	Timeframe     string                 `protobuf:"bytes,3,opt,name=timeframe,proto3" json:"timeframe,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetricMilestone) Reset() {
	*x = MetricMilestone{}
	mi := &file_protobuf_intelligence_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricMilestone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricMilestone) ProtoMessage() {}

func (x *MetricMilestone) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricMilestone.ProtoReflect.Descriptor instead.
func (*MetricMilestone) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{40}
}

func (x *MetricMilestone) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *MetricMilestone) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *MetricMilestone) GetTimeframe() string {
	if x != nil {
		return x.Timeframe
	}
	return ""
}

type DemoHighlight struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Feature          string                 `protobuf:"bytes,1,opt,name=feature,proto3" json:"feature,omitempty"`
	TestimonialProof []string               `protobuf:"bytes,2,rep,name=testimonial_proof,json=testimonialProof,proto3" json:"testimonial_proof,omitempty"`
	InteractionType  string                 `protobuf:"bytes,3,opt,name=interaction_type,json=interactionType,proto3" json:"interaction_type,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DemoHighlight) Reset() {
	*x = DemoHighlight{}
	mi := &file_protobuf_intelligence_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemoHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoHighlight) ProtoMessage() {}

func (x *DemoHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoHighlight.ProtoReflect.Descriptor instead.
func (*DemoHighlight) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{41}
}

func (x *DemoHighlight) GetFeature() string {
	if x != nil {
		return x.Feature
	}
	return ""
}

func (x *DemoHighlight) GetTestimonialProof() []string {
	if x != nil {
		return x.TestimonialProof
	}
	return nil
}

func (x *DemoHighlight) GetInteractionType() string {
	if x != nil {
		return x.InteractionType
	}
	return ""
}

type CustomerQuote struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Quote           string                 `protobuf:"bytes,1,opt,name=quote,proto3" json:"quote,omitempty"`
	Context         string                 `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	RelatedFeatures []string               `protobuf:"bytes,3,rep,name=related_features,json=relatedFeatures,proto3" json:"related_features,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CustomerQuote) Reset() {
	*x = CustomerQuote{}
	mi := &file_protobuf_intelligence_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CustomerQuote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomerQuote) ProtoMessage() {}

func (x *CustomerQuote) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomerQuote.ProtoReflect.Descriptor instead.
func (*CustomerQuote) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{42}
}

func (x *CustomerQuote) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *CustomerQuote) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *CustomerQuote) GetRelatedFeatures() []string {
	if x != nil {
		return x.RelatedFeatures
	}
	return nil
}

type MetricVisualization struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MetricName        string                 `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	VisualizationType string                 `protobuf:"bytes,2,opt,name=visualization_type,json=visualizationType,proto3" json:"visualization_type,omitempty"`
	DataPoints        []float64              `protobuf:"fixed64,3,rep,packed,name=data_points,json=dataPoints,proto3" json:"data_points,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MetricVisualization) Reset() {
	*x = MetricVisualization{}
	mi := &file_protobuf_intelligence_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetricVisualization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricVisualization) ProtoMessage() {}

func (x *MetricVisualization) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricVisualization.ProtoReflect.Descriptor instead.
func (*MetricVisualization) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{43}
}

func (x *MetricVisualization) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *MetricVisualization) GetVisualizationType() string {
	if x != nil {
		return x.VisualizationType
	}
	return ""
}

func (x *MetricVisualization) GetDataPoints() []float64 {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

type CompanyProfile struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Size              string                 `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	Industry          string                 `protobuf:"bytes,2,opt,name=industry,proto3" json:"industry,omitempty"`
	CurrentChallenges []string               `protobuf:"bytes,3,rep,name=current_challenges,json=currentChallenges,proto3" json:"current_challenges,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CompanyProfile) Reset() {
	*x = CompanyProfile{}
	mi := &file_protobuf_intelligence_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompanyProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyProfile) ProtoMessage() {}

func (x *CompanyProfile) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyProfile.ProtoReflect.Descriptor instead.
func (*CompanyProfile) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{44}
}

func (x *CompanyProfile) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *CompanyProfile) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *CompanyProfile) GetCurrentChallenges() []string {
	if x != nil {
		return x.CurrentChallenges
	}
	return nil
}

type ROIMetric struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MetricName        string                 `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	ProjectedValue    float64                `protobuf:"fixed64,2,opt,name=projected_value,json=projectedValue,proto3" json:"projected_value,omitempty"`
	CalculationMethod string                 `protobuf:"bytes,3,opt,name=calculation_method,json=calculationMethod,proto3" json:"calculation_method,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ROIMetric) Reset() {
	*x = ROIMetric{}
	mi := &file_protobuf_intelligence_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ROIMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROIMetric) ProtoMessage() {}

func (x *ROIMetric) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROIMetric.ProtoReflect.Descriptor instead.
func (*ROIMetric) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{45}
}

func (x *ROIMetric) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *ROIMetric) GetProjectedValue() float64 {
	if x != nil {
		return x.ProjectedValue
	}
	return 0
}

func (x *ROIMetric) GetCalculationMethod() string {
	if x != nil {
		return x.CalculationMethod
	}
	return ""
}

type BenchmarkComparison struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Metric               string                 `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	IndustryAverage      float64                `protobuf:"fixed64,2,opt,name=industry_average,json=industryAverage,proto3" json:"industry_average,omitempty"`
	ProjectedPerformance float64                `protobuf:"fixed64,3,opt,name=projected_performance,json=projectedPerformance,proto3" json:"projected_performance,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *BenchmarkComparison) Reset() {
	*x = BenchmarkComparison{}
	mi := &file_protobuf_intelligence_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BenchmarkComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkComparison) ProtoMessage() {}

func (x *BenchmarkComparison) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkComparison.ProtoReflect.Descriptor instead.
func (*BenchmarkComparison) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{46}
}

func (x *BenchmarkComparison) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *BenchmarkComparison) GetIndustryAverage() float64 {
	if x != nil {
		return x.IndustryAverage
	}
	return 0
}

func (x *BenchmarkComparison) GetProjectedPerformance() float64 {
	if x != nil {
		return x.ProjectedPerformance
	}
	return 0
}

type JourneyMapRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	TestimonialIds          []string               `protobuf:"bytes,1,rep,name=testimonial_ids,json=testimonialIds,proto3" json:"testimonial_ids,omitempty"`
	IndustryVertical        string                 `protobuf:"bytes,2,opt,name=industry_vertical,json=industryVertical,proto3" json:"industry_vertical,omitempty"`
	IncludeEmotionalJourney bool                   `protobuf:"varint,3,opt,name=include_emotional_journey,json=includeEmotionalJourney,proto3" json:"include_emotional_journey,omitempty"`
	KeyMetrics              []string               `protobuf:"bytes,4,rep,name=key_metrics,json=keyMetrics,proto3" json:"key_metrics,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *JourneyMapRequest) Reset() {
	*x = JourneyMapRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JourneyMapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JourneyMapRequest) ProtoMessage() {}

func (x *JourneyMapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JourneyMapRequest.ProtoReflect.Descriptor instead.
func (*JourneyMapRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{47}
}

func (x *JourneyMapRequest) GetTestimonialIds() []string {
	if x != nil {
		return x.TestimonialIds
	}
	return nil
}

func (x *JourneyMapRequest) GetIndustryVertical() string {
	if x != nil {
		return x.IndustryVertical
	}
	return ""
}

func (x *JourneyMapRequest) GetIncludeEmotionalJourney() bool {
	if x != nil {
		return x.IncludeEmotionalJourney
	}
	return false
}

func (x *JourneyMapRequest) GetKeyMetrics() []string {
	if x != nil {
		return x.KeyMetrics
	}
	return nil
}

type JourneyMapResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Stages              []*JourneyStage        `protobuf:"bytes,1,rep,name=stages,proto3" json:"stages,omitempty"`
	EmotionalMilestones []*EmotionalMilestone  `protobuf:"bytes,2,rep,name=emotional_milestones,json=emotionalMilestones,proto3" json:"emotional_milestones,omitempty"`
	VisualizationUrl    string                 `protobuf:"bytes,3,opt,name=visualization_url,json=visualizationUrl,proto3" json:"visualization_url,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *JourneyMapResponse) Reset() {
	*x = JourneyMapResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JourneyMapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JourneyMapResponse) ProtoMessage() {}

func (x *JourneyMapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JourneyMapResponse.ProtoReflect.Descriptor instead.
func (*JourneyMapResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{48}
}

func (x *JourneyMapResponse) GetStages() []*JourneyStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *JourneyMapResponse) GetEmotionalMilestones() []*EmotionalMilestone {
	if x != nil {
		return x.EmotionalMilestones
	}
	return nil
}

func (x *JourneyMapResponse) GetVisualizationUrl() string {
	if x != nil {
		return x.VisualizationUrl
	}
	return ""
}

type ProductDemoRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TestimonialId     string                 `protobuf:"bytes,1,opt,name=testimonial_id,json=testimonialId,proto3" json:"testimonial_id,omitempty"`
	ProductCategory   string                 `protobuf:"bytes,2,opt,name=product_category,json=productCategory,proto3" json:"product_category,omitempty"`
	TargetUser        *UserProfile           `protobuf:"bytes,3,opt,name=target_user,json=targetUser,proto3" json:"target_user,omitempty"`
	HighlightFeatures []string               `protobuf:"bytes,4,rep,name=highlight_features,json=highlightFeatures,proto3" json:"highlight_features,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProductDemoRequest) Reset() {
	*x = ProductDemoRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductDemoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDemoRequest) ProtoMessage() {}

func (x *ProductDemoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDemoRequest.ProtoReflect.Descriptor instead.
func (*ProductDemoRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{49}
}

func (x *ProductDemoRequest) GetTestimonialId() string {
	if x != nil {
		return x.TestimonialId
	}
	return ""
}

func (x *ProductDemoRequest) GetProductCategory() string {
	if x != nil {
		return x.ProductCategory
	}
	return ""
}

func (x *ProductDemoRequest) GetTargetUser() *UserProfile {
	if x != nil {
		return x.TargetUser
	}
	return nil
}

func (x *ProductDemoRequest) GetHighlightFeatures() []string {
	if x != nil {
		return x.HighlightFeatures
	}
	return nil
}

type ProductDemoResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	InteractiveDemoUrl string                 `protobuf:"bytes,1,opt,name=interactive_demo_url,json=interactiveDemoUrl,proto3" json:"interactive_demo_url,omitempty"`
	Scenes             []*DemoScene           `protobuf:"bytes,2,rep,name=scenes,proto3" json:"scenes,omitempty"`
	EngagementMetrics  map[string]float32     `protobuf:"bytes,3,rep,name=engagement_metrics,json=engagementMetrics,proto3" json:"engagement_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ProductDemoResponse) Reset() {
	*x = ProductDemoResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProductDemoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductDemoResponse) ProtoMessage() {}

func (x *ProductDemoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductDemoResponse.ProtoReflect.Descriptor instead.
func (*ProductDemoResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{50}
}

func (x *ProductDemoResponse) GetInteractiveDemoUrl() string {
	if x != nil {
		return x.InteractiveDemoUrl
	}
	return ""
}

func (x *ProductDemoResponse) GetScenes() []*DemoScene {
	if x != nil {
		return x.Scenes
	}
	return nil
}

func (x *ProductDemoResponse) GetEngagementMetrics() map[string]float32 {
	if x != nil {
		return x.EngagementMetrics
	}
	return nil
}

type ROIPredictorRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Industry       string                 `protobuf:"bytes,1,opt,name=industry,proto3" json:"industry,omitempty"`
	CompanyProfile *CompanyProfile        `protobuf:"bytes,2,opt,name=company_profile,json=companyProfile,proto3" json:"company_profile,omitempty"`
	TargetMetrics  []string               `protobuf:"bytes,3,rep,name=target_metrics,json=targetMetrics,proto3" json:"target_metrics,omitempty"`
	HistoricalData []*HistoricalData      `protobuf:"bytes,4,rep,name=historical_data,json=historicalData,proto3" json:"historical_data,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ROIPredictorRequest) Reset() {
	*x = ROIPredictorRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ROIPredictorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROIPredictorRequest) ProtoMessage() {}

func (x *ROIPredictorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROIPredictorRequest.ProtoReflect.Descriptor instead.
func (*ROIPredictorRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{51}
}

func (x *ROIPredictorRequest) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *ROIPredictorRequest) GetCompanyProfile() *CompanyProfile {
	if x != nil {
		return x.CompanyProfile
	}
	return nil
}

func (x *ROIPredictorRequest) GetTargetMetrics() []string {
	if x != nil {
		return x.TargetMetrics
	}
	return nil
}

func (x *ROIPredictorRequest) GetHistoricalData() []*HistoricalData {
	if x != nil {
		return x.HistoricalData
	}
	return nil
}

type ROIPredictorResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Predictions         []*ROIPrediction       `protobuf:"bytes,1,rep,name=predictions,proto3" json:"predictions,omitempty"`
	VisualizationWidget string                 `protobuf:"bytes,2,opt,name=visualization_widget,json=visualizationWidget,proto3" json:"visualization_widget,omitempty"`
	InsightExplanations []string               `protobuf:"bytes,3,rep,name=insight_explanations,json=insightExplanations,proto3" json:"insight_explanations,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ROIPredictorResponse) Reset() {
	*x = ROIPredictorResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ROIPredictorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROIPredictorResponse) ProtoMessage() {}

func (x *ROIPredictorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROIPredictorResponse.ProtoReflect.Descriptor instead.
func (*ROIPredictorResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{52}
}

func (x *ROIPredictorResponse) GetPredictions() []*ROIPrediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *ROIPredictorResponse) GetVisualizationWidget() string {
	if x != nil {
		return x.VisualizationWidget
	}
	return ""
}

func (x *ROIPredictorResponse) GetInsightExplanations() []string {
	if x != nil {
		return x.InsightExplanations
	}
	return nil
}

type MicrositeRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ProspectCompany  string                 `protobuf:"bytes,1,opt,name=prospect_company,json=prospectCompany,proto3" json:"prospect_company,omitempty"`
	PainPoints       []string               `protobuf:"bytes,2,rep,name=pain_points,json=painPoints,proto3" json:"pain_points,omitempty"`
	SuccessMetrics   []string               `protobuf:"bytes,3,rep,name=success_metrics,json=successMetrics,proto3" json:"success_metrics,omitempty"`
	IndustryVertical string                 `protobuf:"bytes,4,opt,name=industry_vertical,json=industryVertical,proto3" json:"industry_vertical,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MicrositeRequest) Reset() {
	*x = MicrositeRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MicrositeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicrositeRequest) ProtoMessage() {}

func (x *MicrositeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicrositeRequest.ProtoReflect.Descriptor instead.
func (*MicrositeRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{53}
}

func (x *MicrositeRequest) GetProspectCompany() string {
	if x != nil {
		return x.ProspectCompany
	}
	return ""
}

func (x *MicrositeRequest) GetPainPoints() []string {
	if x != nil {
		return x.PainPoints
	}
	return nil
}

func (x *MicrositeRequest) GetSuccessMetrics() []string {
	if x != nil {
		return x.SuccessMetrics
	}
	return nil
}

func (x *MicrositeRequest) GetIndustryVertical() string {
	if x != nil {
		return x.IndustryVertical
	}
	return ""
}

type MicrositeResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	MicrositeUrl           string                 `protobuf:"bytes,1,opt,name=microsite_url,json=micrositeUrl,proto3" json:"microsite_url,omitempty"`
	ContentBlocks          []*AIGeneratedContent  `protobuf:"bytes,2,rep,name=content_blocks,json=contentBlocks,proto3" json:"content_blocks,omitempty"`
	PersonalizationFactors []string               `protobuf:"bytes,3,rep,name=personalization_factors,json=personalizationFactors,proto3" json:"personalization_factors,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MicrositeResponse) Reset() {
	*x = MicrositeResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MicrositeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicrositeResponse) ProtoMessage() {}

func (x *MicrositeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicrositeResponse.ProtoReflect.Descriptor instead.
func (*MicrositeResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{54}
}

func (x *MicrositeResponse) GetMicrositeUrl() string {
	if x != nil {
		return x.MicrositeUrl
	}
	return ""
}

func (x *MicrositeResponse) GetContentBlocks() []*AIGeneratedContent {
	if x != nil {
		return x.ContentBlocks
	}
	return nil
}

func (x *MicrositeResponse) GetPersonalizationFactors() []string {
	if x != nil {
		return x.PersonalizationFactors
	}
	return nil
}

type SalesConversationRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TestimonialId    string                 `protobuf:"bytes,1,opt,name=testimonial_id,json=testimonialId,proto3" json:"testimonial_id,omitempty"`
	ProspectIndustry string                 `protobuf:"bytes,2,opt,name=prospect_industry,json=prospectIndustry,proto3" json:"prospect_industry,omitempty"`
	Objections       []string               `protobuf:"bytes,3,rep,name=objections,proto3" json:"objections,omitempty"`
	Context          *SalesContext          `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SalesConversationRequest) Reset() {
	*x = SalesConversationRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SalesConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesConversationRequest) ProtoMessage() {}

func (x *SalesConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesConversationRequest.ProtoReflect.Descriptor instead.
func (*SalesConversationRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{55}
}

func (x *SalesConversationRequest) GetTestimonialId() string {
	if x != nil {
		return x.TestimonialId
	}
	return ""
}

func (x *SalesConversationRequest) GetProspectIndustry() string {
	if x != nil {
		return x.ProspectIndustry
	}
	return ""
}

func (x *SalesConversationRequest) GetObjections() []string {
	if x != nil {
		return x.Objections
	}
	return nil
}

func (x *SalesConversationRequest) GetContext() *SalesContext {
	if x != nil {
		return x.Context
	}
	return nil
}

type SalesConversationResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TalkingPoints     []*ConversationPoint   `protobuf:"bytes,1,rep,name=talking_points,json=talkingPoints,proto3" json:"talking_points,omitempty"`
	TestimonialQuotes []string               `protobuf:"bytes,2,rep,name=testimonial_quotes,json=testimonialQuotes,proto3" json:"testimonial_quotes,omitempty"`
	ObjectionHandlers map[string]string      `protobuf:"bytes,3,rep,name=objection_handlers,json=objectionHandlers,proto3" json:"objection_handlers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SalesConversationResponse) Reset() {
	*x = SalesConversationResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SalesConversationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesConversationResponse) ProtoMessage() {}

func (x *SalesConversationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesConversationResponse.ProtoReflect.Descriptor instead.
func (*SalesConversationResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{56}
}

func (x *SalesConversationResponse) GetTalkingPoints() []*ConversationPoint {
	if x != nil {
		return x.TalkingPoints
	}
	return nil
}

func (x *SalesConversationResponse) GetTestimonialQuotes() []string {
	if x != nil {
		return x.TestimonialQuotes
	}
	return nil
}

func (x *SalesConversationResponse) GetObjectionHandlers() map[string]string {
	if x != nil {
		return x.ObjectionHandlers
	}
	return nil
}

type EmotionalResonanceRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TestimonialContent string                 `protobuf:"bytes,1,opt,name=testimonial_content,json=testimonialContent,proto3" json:"testimonial_content,omitempty"`
	TargetAudience     string                 `protobuf:"bytes,2,opt,name=target_audience,json=targetAudience,proto3" json:"target_audience,omitempty"`
	EmotionalGoals     []string               `protobuf:"bytes,3,rep,name=emotional_goals,json=emotionalGoals,proto3" json:"emotional_goals,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *EmotionalResonanceRequest) Reset() {
	*x = EmotionalResonanceRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmotionalResonanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionalResonanceRequest) ProtoMessage() {}

func (x *EmotionalResonanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionalResonanceRequest.ProtoReflect.Descriptor instead.
func (*EmotionalResonanceRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{57}
}

func (x *EmotionalResonanceRequest) GetTestimonialContent() string {
	if x != nil {
		return x.TestimonialContent
	}
	return ""
}

func (x *EmotionalResonanceRequest) GetTargetAudience() string {
	if x != nil {
		return x.TargetAudience
	}
	return ""
}

func (x *EmotionalResonanceRequest) GetEmotionalGoals() []string {
	if x != nil {
		return x.EmotionalGoals
	}
	return nil
}

type EmotionalResonanceResponse struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ResonanceScore          float32                `protobuf:"fixed32,1,opt,name=resonance_score,json=resonanceScore,proto3" json:"resonance_score,omitempty"`
	EmotionalImpacts        []*EmotionalImpact     `protobuf:"bytes,2,rep,name=emotional_impacts,json=emotionalImpacts,proto3" json:"emotional_impacts,omitempty"`
	OptimizationSuggestions []string               `protobuf:"bytes,3,rep,name=optimization_suggestions,json=optimizationSuggestions,proto3" json:"optimization_suggestions,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *EmotionalResonanceResponse) Reset() {
	*x = EmotionalResonanceResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmotionalResonanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionalResonanceResponse) ProtoMessage() {}

func (x *EmotionalResonanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionalResonanceResponse.ProtoReflect.Descriptor instead.
func (*EmotionalResonanceResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{58}
}

func (x *EmotionalResonanceResponse) GetResonanceScore() float32 {
	if x != nil {
		return x.ResonanceScore
	}
	return 0
}

func (x *EmotionalResonanceResponse) GetEmotionalImpacts() []*EmotionalImpact {
	if x != nil {
		return x.EmotionalImpacts
	}
	return nil
}

func (x *EmotionalResonanceResponse) GetOptimizationSuggestions() []string {
	if x != nil {
		return x.OptimizationSuggestions
	}
	return nil
}

type CompetitiveDiffRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TestimonialIds  []string               `protobuf:"bytes,1,rep,name=testimonial_ids,json=testimonialIds,proto3" json:"testimonial_ids,omitempty"`
	CompetitorNames []string               `protobuf:"bytes,2,rep,name=competitor_names,json=competitorNames,proto3" json:"competitor_names,omitempty"`
	MarketSegment   string                 `protobuf:"bytes,3,opt,name=market_segment,json=marketSegment,proto3" json:"market_segment,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CompetitiveDiffRequest) Reset() {
	*x = CompetitiveDiffRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompetitiveDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitiveDiffRequest) ProtoMessage() {}

func (x *CompetitiveDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitiveDiffRequest.ProtoReflect.Descriptor instead.
func (*CompetitiveDiffRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{59}
}

func (x *CompetitiveDiffRequest) GetTestimonialIds() []string {
	if x != nil {
		return x.TestimonialIds
	}
	return nil
}

func (x *CompetitiveDiffRequest) GetCompetitorNames() []string {
	if x != nil {
		return x.CompetitorNames
	}
	return nil
}

func (x *CompetitiveDiffRequest) GetMarketSegment() string {
	if x != nil {
		return x.MarketSegment
	}
	return ""
}

type CompetitiveDiffResponse struct {
	state                 protoimpl.MessageState   `protogen:"open.v1"`
	Differentiators       []*DifferentiatorInsight `protobuf:"bytes,1,rep,name=differentiators,proto3" json:"differentiators,omitempty"`
	CompetitiveAdvantages map[string]float32       `protobuf:"bytes,2,rep,name=competitive_advantages,json=competitiveAdvantages,proto3" json:"competitive_advantages,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	ActionableInsights    []string                 `protobuf:"bytes,3,rep,name=actionable_insights,json=actionableInsights,proto3" json:"actionable_insights,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CompetitiveDiffResponse) Reset() {
	*x = CompetitiveDiffResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompetitiveDiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitiveDiffResponse) ProtoMessage() {}

func (x *CompetitiveDiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitiveDiffResponse.ProtoReflect.Descriptor instead.
func (*CompetitiveDiffResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{60}
}

func (x *CompetitiveDiffResponse) GetDifferentiators() []*DifferentiatorInsight {
	if x != nil {
		return x.Differentiators
	}
	return nil
}

func (x *CompetitiveDiffResponse) GetCompetitiveAdvantages() map[string]float32 {
	if x != nil {
		return x.CompetitiveAdvantages
	}
	return nil
}

func (x *CompetitiveDiffResponse) GetActionableInsights() []string {
	if x != nil {
		return x.ActionableInsights
	}
	return nil
}

type MultimodalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestimonialId string                 `protobuf:"bytes,1,opt,name=testimonial_id,json=testimonialId,proto3" json:"testimonial_id,omitempty"`
	OutputFormats []string               `protobuf:"bytes,2,rep,name=output_formats,json=outputFormats,proto3" json:"output_formats,omitempty"`
	StylePrefs    *StylePreferences      `protobuf:"bytes,3,opt,name=style_prefs,json=stylePrefs,proto3" json:"style_prefs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MultimodalRequest) Reset() {
	*x = MultimodalRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultimodalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultimodalRequest) ProtoMessage() {}

func (x *MultimodalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultimodalRequest.ProtoReflect.Descriptor instead.
func (*MultimodalRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{61}
}

func (x *MultimodalRequest) GetTestimonialId() string {
	if x != nil {
		return x.TestimonialId
	}
	return ""
}

func (x *MultimodalRequest) GetOutputFormats() []string {
	if x != nil {
		return x.OutputFormats
	}
	return nil
}

func (x *MultimodalRequest) GetStylePrefs() *StylePreferences {
	if x != nil {
		return x.StylePrefs
	}
	return nil
}

type MultimodalResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ContentUrls     map[string]string      `protobuf:"bytes,1,rep,name=content_urls,json=contentUrls,proto3" json:"content_urls,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	QualityMetrics  []*SynthesisMetric     `protobuf:"bytes,2,rep,name=quality_metrics,json=qualityMetrics,proto3" json:"quality_metrics,omitempty"`
	IntegrationCode string                 `protobuf:"bytes,3,opt,name=integration_code,json=integrationCode,proto3" json:"integration_code,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MultimodalResponse) Reset() {
	*x = MultimodalResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultimodalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultimodalResponse) ProtoMessage() {}

func (x *MultimodalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultimodalResponse.ProtoReflect.Descriptor instead.
func (*MultimodalResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{62}
}

func (x *MultimodalResponse) GetContentUrls() map[string]string {
	if x != nil {
		return x.ContentUrls
	}
	return nil
}

func (x *MultimodalResponse) GetQualityMetrics() []*SynthesisMetric {
	if x != nil {
		return x.QualityMetrics
	}
	return nil
}

func (x *MultimodalResponse) GetIntegrationCode() string {
	if x != nil {
		return x.IntegrationCode
	}
	return ""
}

type UserProfile struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	UserId               string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Email                string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	AccountCreationDate  string                 `protobuf:"bytes,4,opt,name=account_creation_date,json=accountCreationDate,proto3" json:"account_creation_date,omitempty"`
	PreviousInteractions []string               `protobuf:"bytes,5,rep,name=previous_interactions,json=previousInteractions,proto3" json:"previous_interactions,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UserProfile) Reset() {
	*x = UserProfile{}
	mi := &file_protobuf_intelligence_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProfile) ProtoMessage() {}

func (x *UserProfile) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProfile.ProtoReflect.Descriptor instead.
func (*UserProfile) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{63}
}

func (x *UserProfile) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserProfile) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserProfile) GetAccountCreationDate() string {
	if x != nil {
		return x.AccountCreationDate
	}
	return ""
}

func (x *UserProfile) GetPreviousInteractions() []string {
	if x != nil {
		return x.PreviousInteractions
	}
	return nil
}

type DemoScene struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SceneName            string                 `protobuf:"bytes,1,opt,name=scene_name,json=sceneName,proto3" json:"scene_name,omitempty"`
	Description          string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	KeyFeaturesShowcased []string               `protobuf:"bytes,3,rep,name=key_features_showcased,json=keyFeaturesShowcased,proto3" json:"key_features_showcased,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DemoScene) Reset() {
	*x = DemoScene{}
	mi := &file_protobuf_intelligence_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DemoScene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DemoScene) ProtoMessage() {}

func (x *DemoScene) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DemoScene.ProtoReflect.Descriptor instead.
func (*DemoScene) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{64}
}

func (x *DemoScene) GetSceneName() string {
	if x != nil {
		return x.SceneName
	}
	return ""
}

func (x *DemoScene) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DemoScene) GetKeyFeaturesShowcased() []string {
	if x != nil {
		return x.KeyFeaturesShowcased
	}
	return nil
}

type HistoricalData struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PastTestimonials   []string               `protobuf:"bytes,1,rep,name=past_testimonials,json=pastTestimonials,proto3" json:"past_testimonials,omitempty"`
	PastRoiPredictions []*ROIPrediction       `protobuf:"bytes,2,rep,name=past_roi_predictions,json=pastRoiPredictions,proto3" json:"past_roi_predictions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *HistoricalData) Reset() {
	*x = HistoricalData{}
	mi := &file_protobuf_intelligence_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HistoricalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalData) ProtoMessage() {}

func (x *HistoricalData) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalData.ProtoReflect.Descriptor instead.
func (*HistoricalData) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{65}
}

func (x *HistoricalData) GetPastTestimonials() []string {
	if x != nil {
		return x.PastTestimonials
	}
	return nil
}

func (x *HistoricalData) GetPastRoiPredictions() []*ROIPrediction {
	if x != nil {
		return x.PastRoiPredictions
	}
	return nil
}

type ROIPrediction struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MetricName        string                 `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	ProjectedValue    float64                `protobuf:"fixed64,2,opt,name=projected_value,json=projectedValue,proto3" json:"projected_value,omitempty"`
	CalculationMethod string                 `protobuf:"bytes,3,opt,name=calculation_method,json=calculationMethod,proto3" json:"calculation_method,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ROIPrediction) Reset() {
	*x = ROIPrediction{}
	mi := &file_protobuf_intelligence_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ROIPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ROIPrediction) ProtoMessage() {}

func (x *ROIPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ROIPrediction.ProtoReflect.Descriptor instead.
func (*ROIPrediction) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{66}
}

func (x *ROIPrediction) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *ROIPrediction) GetProjectedValue() float64 {
	if x != nil {
		return x.ProjectedValue
	}
	return 0
}

func (x *ROIPrediction) GetCalculationMethod() string {
	if x != nil {
		return x.CalculationMethod
	}
	return ""
}

type AIGeneratedContent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContentType   string                 `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	GeneratedText string                 `protobuf:"bytes,2,opt,name=generated_text,json=generatedText,proto3" json:"generated_text,omitempty"`
	Metadata      string                 `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AIGeneratedContent) Reset() {
	*x = AIGeneratedContent{}
	mi := &file_protobuf_intelligence_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AIGeneratedContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AIGeneratedContent) ProtoMessage() {}

func (x *AIGeneratedContent) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AIGeneratedContent.ProtoReflect.Descriptor instead.
func (*AIGeneratedContent) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{67}
}

func (x *AIGeneratedContent) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *AIGeneratedContent) GetGeneratedText() string {
	if x != nil {
		return x.GeneratedText
	}
	return ""
}

func (x *AIGeneratedContent) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

type SalesContext struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Industry       string                 `protobuf:"bytes,1,opt,name=industry,proto3" json:"industry,omitempty"`
	TargetAudience string                 `protobuf:"bytes,2,opt,name=target_audience,json=targetAudience,proto3" json:"target_audience,omitempty"`
	SalesStrategy  string                 `protobuf:"bytes,3,opt,name=sales_strategy,json=salesStrategy,proto3" json:"sales_strategy,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SalesContext) Reset() {
	*x = SalesContext{}
	mi := &file_protobuf_intelligence_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SalesContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SalesContext) ProtoMessage() {}

func (x *SalesContext) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SalesContext.ProtoReflect.Descriptor instead.
func (*SalesContext) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{68}
}

func (x *SalesContext) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *SalesContext) GetTargetAudience() string {
	if x != nil {
		return x.TargetAudience
	}
	return ""
}

func (x *SalesContext) GetSalesStrategy() string {
	if x != nil {
		return x.SalesStrategy
	}
	return ""
}

type ConversationPoint struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Topic               string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	RecommendedResponse string                 `protobuf:"bytes,2,opt,name=recommended_response,json=recommendedResponse,proto3" json:"recommended_response,omitempty"`
	EngagementScore     float32                `protobuf:"fixed32,3,opt,name=engagement_score,json=engagementScore,proto3" json:"engagement_score,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ConversationPoint) Reset() {
	*x = ConversationPoint{}
	mi := &file_protobuf_intelligence_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationPoint) ProtoMessage() {}

func (x *ConversationPoint) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationPoint.ProtoReflect.Descriptor instead.
func (*ConversationPoint) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{69}
}

func (x *ConversationPoint) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ConversationPoint) GetRecommendedResponse() string {
	if x != nil {
		return x.RecommendedResponse
	}
	return ""
}

func (x *ConversationPoint) GetEngagementScore() float32 {
	if x != nil {
		return x.EngagementScore
	}
	return 0
}

type EmotionalImpact struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Factor               string                 `protobuf:"bytes,1,opt,name=factor,proto3" json:"factor,omitempty"`
	Intensity            float32                `protobuf:"fixed32,2,opt,name=intensity,proto3" json:"intensity,omitempty"`
	ContributingElements []string               `protobuf:"bytes,3,rep,name=contributing_elements,json=contributingElements,proto3" json:"contributing_elements,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EmotionalImpact) Reset() {
	*x = EmotionalImpact{}
	mi := &file_protobuf_intelligence_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmotionalImpact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmotionalImpact) ProtoMessage() {}

func (x *EmotionalImpact) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmotionalImpact.ProtoReflect.Descriptor instead.
func (*EmotionalImpact) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{70}
}

func (x *EmotionalImpact) GetFactor() string {
	if x != nil {
		return x.Factor
	}
	return ""
}

func (x *EmotionalImpact) GetIntensity() float32 {
	if x != nil {
		return x.Intensity
	}
	return 0
}

func (x *EmotionalImpact) GetContributingElements() []string {
	if x != nil {
		return x.ContributingElements
	}
	return nil
}

type DifferentiatorInsight struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Differentiator       string                 `protobuf:"bytes,1,opt,name=differentiator,proto3" json:"differentiator,omitempty"`
	CompetitiveAdvantage string                 `protobuf:"bytes,2,opt,name=competitive_advantage,json=competitiveAdvantage,proto3" json:"competitive_advantage,omitempty"`
	UniquenessScore      float32                `protobuf:"fixed32,3,opt,name=uniqueness_score,json=uniquenessScore,proto3" json:"uniqueness_score,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *DifferentiatorInsight) Reset() {
	*x = DifferentiatorInsight{}
	mi := &file_protobuf_intelligence_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DifferentiatorInsight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DifferentiatorInsight) ProtoMessage() {}

func (x *DifferentiatorInsight) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DifferentiatorInsight.ProtoReflect.Descriptor instead.
func (*DifferentiatorInsight) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{71}
}

func (x *DifferentiatorInsight) GetDifferentiator() string {
	if x != nil {
		return x.Differentiator
	}
	return ""
}

func (x *DifferentiatorInsight) GetCompetitiveAdvantage() string {
	if x != nil {
		return x.CompetitiveAdvantage
	}
	return ""
}

func (x *DifferentiatorInsight) GetUniquenessScore() float32 {
	if x != nil {
		return x.UniquenessScore
	}
	return 0
}

type StylePreferences struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Tone                 string                 `protobuf:"bytes,1,opt,name=tone,proto3" json:"tone,omitempty"`
	Format               string                 `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	PersonalizationLevel string                 `protobuf:"bytes,3,opt,name=personalization_level,json=personalizationLevel,proto3" json:"personalization_level,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *StylePreferences) Reset() {
	*x = StylePreferences{}
	mi := &file_protobuf_intelligence_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StylePreferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StylePreferences) ProtoMessage() {}

func (x *StylePreferences) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StylePreferences.ProtoReflect.Descriptor instead.
func (*StylePreferences) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{72}
}

func (x *StylePreferences) GetTone() string {
	if x != nil {
		return x.Tone
	}
	return ""
}

func (x *StylePreferences) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *StylePreferences) GetPersonalizationLevel() string {
	if x != nil {
		return x.PersonalizationLevel
	}
	return ""
}

type SynthesisMetric struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	MetricName             string                 `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	EffectivenessScore     float32                `protobuf:"fixed32,2,opt,name=effectiveness_score,json=effectivenessScore,proto3" json:"effectiveness_score,omitempty"`
	ImprovementSuggestions []string               `protobuf:"bytes,3,rep,name=improvement_suggestions,json=improvementSuggestions,proto3" json:"improvement_suggestions,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SynthesisMetric) Reset() {
	*x = SynthesisMetric{}
	mi := &file_protobuf_intelligence_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynthesisMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesisMetric) ProtoMessage() {}

func (x *SynthesisMetric) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesisMetric.ProtoReflect.Descriptor instead.
func (*SynthesisMetric) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{73}
}

func (x *SynthesisMetric) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *SynthesisMetric) GetEffectivenessScore() float32 {
	if x != nil {
		return x.EffectivenessScore
	}
	return 0
}

func (x *SynthesisMetric) GetImprovementSuggestions() []string {
	if x != nil {
		return x.ImprovementSuggestions
	}
	return nil
}

type BenchmarkRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Industry               string                 `protobuf:"bytes,1,opt,name=industry,proto3" json:"industry,omitempty"`
	MetricToCompare        string                 `protobuf:"bytes,2,opt,name=metric_to_compare,json=metricToCompare,proto3" json:"metric_to_compare,omitempty"`
	CompetitorTestimonials []string               `protobuf:"bytes,3,rep,name=competitor_testimonials,json=competitorTestimonials,proto3" json:"competitor_testimonials,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *BenchmarkRequest) Reset() {
	*x = BenchmarkRequest{}
	mi := &file_protobuf_intelligence_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BenchmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkRequest) ProtoMessage() {}

func (x *BenchmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkRequest.ProtoReflect.Descriptor instead.
func (*BenchmarkRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{74}
}

func (x *BenchmarkRequest) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *BenchmarkRequest) GetMetricToCompare() string {
	if x != nil {
		return x.MetricToCompare
	}
	return ""
}

func (x *BenchmarkRequest) GetCompetitorTestimonials() []string {
	if x != nil {
		return x.CompetitorTestimonials
	}
	return nil
}

type BenchmarkResponse struct {
	state                protoimpl.MessageState   `protogen:"open.v1"`
	Metric               string                   `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	IndustryAverage      float64                  `protobuf:"fixed64,2,opt,name=industry_average,json=industryAverage,proto3" json:"industry_average,omitempty"`
	ProjectedPerformance float64                  `protobuf:"fixed64,3,opt,name=projected_performance,json=projectedPerformance,proto3" json:"projected_performance,omitempty"`
	Insights             []*DifferentiatorInsight `protobuf:"bytes,4,rep,name=insights,proto3" json:"insights,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *BenchmarkResponse) Reset() {
	*x = BenchmarkResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BenchmarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkResponse) ProtoMessage() {}

func (x *BenchmarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkResponse.ProtoReflect.Descriptor instead.
func (*BenchmarkResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{75}
}

func (x *BenchmarkResponse) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *BenchmarkResponse) GetIndustryAverage() float64 {
	if x != nil {
		return x.IndustryAverage
	}
	return 0
}

func (x *BenchmarkResponse) GetProjectedPerformance() float64 {
	if x != nil {
		return x.ProjectedPerformance
	}
	return 0
}

func (x *BenchmarkResponse) GetInsights() []*DifferentiatorInsight {
	if x != nil {
		return x.Insights
	}
	return nil
}

// A message sent from the client.
type ChatMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An identifier to correlate conversation state.
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The text input from the user.
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// Optional context from the video (for instance, key information extracted during video processing).
	VideoContext  string `protobuf:"bytes,3,opt,name=video_context,json=videoContext,proto3" json:"video_context,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_protobuf_intelligence_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{76}
}

func (x *ChatMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ChatMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChatMessage) GetVideoContext() string {
	if x != nil {
		return x.VideoContext
	}
	return ""
}

// A message sent from the server in response to a chat message.
type ChatResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reply text.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The detected emotional tone of the response.
	EmotionalTone string `protobuf:"bytes,2,opt,name=emotional_tone,json=emotionalTone,proto3" json:"emotional_tone,omitempty"`
	// A list of suggested follow-up questions.
	SuggestedQuestions []string `protobuf:"bytes,3,rep,name=suggested_questions,json=suggestedQuestions,proto3" json:"suggested_questions,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChatResponse) Reset() {
	*x = ChatResponse{}
	mi := &file_protobuf_intelligence_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResponse) ProtoMessage() {}

func (x *ChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResponse.ProtoReflect.Descriptor instead.
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{77}
}

func (x *ChatResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ChatResponse) GetEmotionalTone() string {
	if x != nil {
		return x.EmotionalTone
	}
	return ""
}

func (x *ChatResponse) GetSuggestedQuestions() []string {
	if x != nil {
		return x.SuggestedQuestions
	}
	return nil
}

// Message representing a chunk of the video.
type VideoChunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The raw video data for this chunk.
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Metadata about the video chunk, such as user and session IDs.
	Metadata      *VideoMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoChunk) Reset() {
	*x = VideoChunk{}
	mi := &file_protobuf_intelligence_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoChunk) ProtoMessage() {}

func (x *VideoChunk) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoChunk.ProtoReflect.Descriptor instead.
func (*VideoChunk) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{78}
}

func (x *VideoChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *VideoChunk) GetMetadata() *VideoMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Metadata accompanying each video chunk.
type VideoMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoMetadata) Reset() {
	*x = VideoMetadata{}
	mi := &file_protobuf_intelligence_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoMetadata) ProtoMessage() {}

func (x *VideoMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoMetadata.ProtoReflect.Descriptor instead.
func (*VideoMetadata) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{79}
}

func (x *VideoMetadata) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VideoMetadata) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// The summary returned after processing the complete video.
type VideoSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Highlights or key moments extracted from the video.
	Highlights string `protobuf:"bytes,1,opt,name=highlights,proto3" json:"highlights,omitempty"`
	// A transcript of the video.
	Transcript string `protobuf:"bytes,2,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// Overall sentiment (or other analysis results).
	Sentiment     string `protobuf:"bytes,3,opt,name=sentiment,proto3" json:"sentiment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoSummary) Reset() {
	*x = VideoSummary{}
	mi := &file_protobuf_intelligence_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSummary) ProtoMessage() {}

func (x *VideoSummary) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_intelligence_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSummary.ProtoReflect.Descriptor instead.
func (*VideoSummary) Descriptor() ([]byte, []int) {
	return file_protobuf_intelligence_proto_rawDescGZIP(), []int{80}
}

func (x *VideoSummary) GetHighlights() string {
	if x != nil {
		return x.Highlights
	}
	return ""
}

func (x *VideoSummary) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *VideoSummary) GetSentiment() string {
	if x != nil {
		return x.Sentiment
	}
	return ""
}

var File_protobuf_intelligence_proto protoreflect.FileDescriptor

var file_protobuf_intelligence_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x69,
	0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x01, 0x0a,
	0x19, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6e, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x35, 0x0a, 0x17, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x74, 0x6f, 0x5f, 0x65, 0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x14, 0x6b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x45,
	0x6d, 0x70, 0x68, 0x61, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x16,
	0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x65, 0x6e,
	0x68, 0x61, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x6d,
	0x61, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x4d, 0x61, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd7,
	0x01, 0x0a, 0x18, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x08, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x36, 0x0a, 0x07, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x07,
	0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x70,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65,
	0x79, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x46, 0x61, 0x6b, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x9a, 0x02, 0x0a, 0x1d,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x46, 0x61, 0x6b, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x65, 0x0a, 0x0e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x46, 0x61, 0x6b,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd3, 0x01, 0x0a, 0x1b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x54,
	0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xb1,
	0x01, 0x0a, 0x1c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x31, 0x0a, 0x14, 0x63, 0x75, 0x6c, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x75, 0x6c, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x41, 0x64, 0x61, 0x70, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x0b, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x72, 0x65, 0x66, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x47, 0x0a, 0x0f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x55, 0x72, 0x6c, 0x12,
	0x2d, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xd6,
	0x01, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x0d, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x20, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f,
	0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x74, 0x0a, 0x12, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69,
	0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x14, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x44, 0x0a, 0x16, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a,
	0x0f, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x2f, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c,
	0x73, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x06,
	0x74, 0x68, 0x65, 0x6d, 0x65, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69,
	0x61, 0x6c, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6b, 0x65, 0x79, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6b, 0x65, 0x79, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x61,
	0x74, 0x68, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x65, 0x6d, 0x70, 0x61, 0x74, 0x68, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x6f, 0x72, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x1a, 0x43,
	0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x52, 0x08, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x10,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x1a, 0x46, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc6, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x14, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x1b, 0x53, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x4c, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x65, 0x6e, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x33,
	0x0a, 0x15, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x75, 0x64,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x75,
	0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x47, 0x6f, 0x61, 0x6c,
	0x73, 0x22, 0xd4, 0x02, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6b, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x67, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x46, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x67,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0f, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x22,
	0x72, 0x0a, 0x0e, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x50, 0x68, 0x72, 0x61,
	0x73, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x67, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x74, 0x68, 0x6e, 0x69, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x22, 0x68, 0x0a, 0x10, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x22, 0x65, 0x0a, 0x0d, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x22, 0x6e, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x69, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x69, 0x74, 0x63,
	0x68, 0x22, 0x6c, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x72, 0x65, 0x61, 0x73, 0x22,
	0x72, 0x0a, 0x0d, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x6e,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d,
	0x69, 0x6e, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x61, 0x6b, 0x6e, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x61, 0x6b,
	0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x11, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x6f, 0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65,
	0x79, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f,
	0x72, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x65, 0x64, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x6c, 0x0a, 0x0b, 0x54, 0x72, 0x65, 0x6e,
	0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6d, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6d, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73,
	0x22, 0x7e, 0x0a, 0x17, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x22, 0x83, 0x01, 0x0a, 0x0c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x72, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x65, 0x72,
	0x70, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x4f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x73, 0x22, 0x68, 0x0a, 0x12, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x66, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74,
	0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6d,
	0x6f, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6a, 0x0a, 0x0d,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x22, 0x6f, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x09, 0x52, 0x4f, 0x49, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x11, 0x4a, 0x6f,
	0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x56, 0x65, 0x72,
	0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x53, 0x0a,
	0x14, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x52, 0x13, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x69, 0x6c, 0x65, 0x73, 0x74, 0x6f, 0x6e,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x76,
	0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x22,
	0xd1, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x6d, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x6d, 0x6f, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x6d, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6d,
	0x6f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x52, 0x06, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x12, 0x67,
	0x0a, 0x12, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x44, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x6e,
	0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x45, 0x6e, 0x67, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe6, 0x01,
	0x0a, 0x13, 0x52, 0x4f, 0x49, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x45, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x52, 0x4f, 0x49, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x52, 0x4f, 0x49, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x14, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x77, 0x69, 0x64, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x76, 0x69,
	0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x64, 0x67, 0x65,
	0x74, 0x12, 0x31, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x69, 0x6e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0xba, 0x01, 0x0a, 0x11,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x69, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x49,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x37, 0x0a, 0x17, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x18, 0x53, 0x61, 0x6c,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f,
	0x6e, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xc7, 0x02, 0x0a, 0x19, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x0e, 0x74, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x74, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f,
	0x6e, 0x69, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x11, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x19, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x67,
	0x6f, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x47, 0x6f, 0x61, 0x6c, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x45,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73,
	0x6f, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x4a, 0x0a, 0x11, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x52, 0x10, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x18, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x17, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xdc, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x64,
	0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x77, 0x0a, 0x16, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x76,
	0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x1a, 0x48, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2,
	0x01, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x73, 0x22, 0x9d, 0x02, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x73,
	0x12, 0x46, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x55, 0x72,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x82, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6d, 0x6f, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x16, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x73,
	0x68, 0x6f, 0x77, 0x63, 0x61, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14,
	0x6b, 0x65, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x63,
	0x61, 0x73, 0x65, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x74, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x14, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x69,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x52, 0x4f, 0x49, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x12, 0x70, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x69, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x52, 0x4f, 0x49, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x7a,
	0x0a, 0x12, 0x41, 0x49, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7a, 0x0a, 0x0c, 0x53, 0x61,
	0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x65, 0x6e, 0x67, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x7c, 0x0a, 0x0f, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6d, 0x70,
	0x61, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x9f,
	0x01, 0x0a, 0x15, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x64, 0x76, 0x61, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x76, 0x61,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x22, 0x73, 0x0a, 0x10, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x33, 0x0a, 0x15, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x0f, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x17, 0x69,
	0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6d,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64,
	0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f,
	0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x12, 0x37, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x42,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x75,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0x65, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0x7a, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5f, 0x0a, 0x0a,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47, 0x0a,
	0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x32, 0xbc, 0x0e, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61,
	0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x70, 0x0a, 0x15, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x46, 0x61, 0x6b, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x46, 0x61, 0x6b, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x46, 0x61, 0x6b, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x1d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x22, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a,
	0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x12, 0x29, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f,
	0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x18,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x64, 0x65, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e,
	0x69, 0x61, 0x6c, 0x12, 0x2d, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5e, 0x0a, 0x1b, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x41,
	0x67, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x49,
	0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x65,
	0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e,
	0x65, 0x79, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a,
	0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x49, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x44, 0x65, 0x6d, 0x6f, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x6d,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x6d, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x16, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x49, 0x52, 0x4f, 0x49, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x4f, 0x49, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x52, 0x4f, 0x49, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x13,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x49, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x69, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x19, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x61, 0x6c, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x19, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x27, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x70, 0x0a, 0x21, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x66, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x1f, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x54, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x6c, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x64, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x43, 0x68,
	0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c,
	0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e,
	0x63, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x42, 0x79, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1a, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67,
	0x65, 0x6e, 0x63, 0x65, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x28, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_protobuf_intelligence_proto_rawDescOnce sync.Once
	file_protobuf_intelligence_proto_rawDescData = file_protobuf_intelligence_proto_rawDesc
)

func file_protobuf_intelligence_proto_rawDescGZIP() []byte {
	file_protobuf_intelligence_proto_rawDescOnce.Do(func() {
		file_protobuf_intelligence_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_intelligence_proto_rawDescData)
	})
	return file_protobuf_intelligence_proto_rawDescData
}

var file_protobuf_intelligence_proto_msgTypes = make([]protoimpl.MessageInfo, 90)
var file_protobuf_intelligence_proto_goTypes = []any{
	(*EnhanceTestimonialRequest)(nil),        // 0: intelligence.EnhanceTestimonialRequest
	(*EnhanceTestimonialResponse)(nil),       // 1: intelligence.EnhanceTestimonialResponse
	(*AnalyzeSentimentRequest)(nil),          // 2: intelligence.AnalyzeSentimentRequest
	(*AnalyzeSentimentResponse)(nil),         // 3: intelligence.AnalyzeSentimentResponse
	(*DetectFakeTestimonialRequest)(nil),     // 4: intelligence.DetectFakeTestimonialRequest
	(*DetectFakeTestimonialResponse)(nil),    // 5: intelligence.DetectFakeTestimonialResponse
	(*TranslateTestimonialRequest)(nil),      // 6: intelligence.TranslateTestimonialRequest
	(*TranslateTestimonialResponse)(nil),     // 7: intelligence.TranslateTestimonialResponse
	(*GenerateVideoTestimonialRequest)(nil),  // 8: intelligence.GenerateVideoTestimonialRequest
	(*GenerateVideoTestimonialResponse)(nil), // 9: intelligence.GenerateVideoTestimonialResponse
	(*GenerateVoiceTestimonialRequest)(nil),  // 10: intelligence.GenerateVoiceTestimonialRequest
	(*GenerateVoiceTestimonialResponse)(nil), // 11: intelligence.GenerateVoiceTestimonialResponse
	(*GenerateStoryRequest)(nil),             // 12: intelligence.GenerateStoryRequest
	(*GenerateStoryResponse)(nil),            // 13: intelligence.GenerateStoryResponse
	(*GenerateAutoReplyRequest)(nil),         // 14: intelligence.GenerateAutoReplyRequest
	(*GenerateAutoReplyResponse)(nil),        // 15: intelligence.GenerateAutoReplyResponse
	(*CompetitorAnalysisRequest)(nil),        // 16: intelligence.CompetitorAnalysisRequest
	(*CompetitorAnalysisResponse)(nil),       // 17: intelligence.CompetitorAnalysisResponse
	(*SentimentPredictionRequest)(nil),       // 18: intelligence.SentimentPredictionRequest
	(*SentimentPredictionResponse)(nil),      // 19: intelligence.SentimentPredictionResponse
	(*PlacementRequest)(nil),                 // 20: intelligence.PlacementRequest
	(*PlacementResponse)(nil),                // 21: intelligence.PlacementResponse
	(*EmotionAnalysis)(nil),                  // 22: intelligence.EmotionAnalysis
	(*AspectAnalysis)(nil),                   // 23: intelligence.AspectAnalysis
	(*UserMetadata)(nil),                     // 24: intelligence.UserMetadata
	(*AvatarPreferences)(nil),                // 25: intelligence.AvatarPreferences
	(*EmotionTimestamp)(nil),                 // 26: intelligence.EmotionTimestamp
	(*EmotionMarker)(nil),                    // 27: intelligence.EmotionMarker
	(*AudioPreferences)(nil),                 // 28: intelligence.AudioPreferences
	(*StoryPreferences)(nil),                 // 29: intelligence.StoryPreferences
	(*ThemeAnalysis)(nil),                    // 30: intelligence.ThemeAnalysis
	(*CompetitorInsight)(nil),                // 31: intelligence.CompetitorInsight
	(*FeatureComparison)(nil),                // 32: intelligence.FeatureComparison
	(*HistoricalSentiment)(nil),              // 33: intelligence.HistoricalSentiment
	(*TimestampedPrediction)(nil),            // 34: intelligence.TimestampedPrediction
	(*TrendFactor)(nil),                      // 35: intelligence.TrendFactor
	(*UserSegment)(nil),                      // 36: intelligence.UserSegment
	(*PlacementRecommendation)(nil),          // 37: intelligence.PlacementRecommendation
	(*JourneyStage)(nil),                     // 38: intelligence.JourneyStage
	(*EmotionalMilestone)(nil),               // 39: intelligence.EmotionalMilestone
	(*MetricMilestone)(nil),                  // 40: intelligence.MetricMilestone
	(*DemoHighlight)(nil),                    // 41: intelligence.DemoHighlight
	(*CustomerQuote)(nil),                    // 42: intelligence.CustomerQuote
	(*MetricVisualization)(nil),              // 43: intelligence.MetricVisualization
	(*CompanyProfile)(nil),                   // 44: intelligence.CompanyProfile
	(*ROIMetric)(nil),                        // 45: intelligence.ROIMetric
	(*BenchmarkComparison)(nil),              // 46: intelligence.BenchmarkComparison
	(*JourneyMapRequest)(nil),                // 47: intelligence.JourneyMapRequest
	(*JourneyMapResponse)(nil),               // 48: intelligence.JourneyMapResponse
	(*ProductDemoRequest)(nil),               // 49: intelligence.ProductDemoRequest
	(*ProductDemoResponse)(nil),              // 50: intelligence.ProductDemoResponse
	(*ROIPredictorRequest)(nil),              // 51: intelligence.ROIPredictorRequest
	(*ROIPredictorResponse)(nil),             // 52: intelligence.ROIPredictorResponse
	(*MicrositeRequest)(nil),                 // 53: intelligence.MicrositeRequest
	(*MicrositeResponse)(nil),                // 54: intelligence.MicrositeResponse
	(*SalesConversationRequest)(nil),         // 55: intelligence.SalesConversationRequest
	(*SalesConversationResponse)(nil),        // 56: intelligence.SalesConversationResponse
	(*EmotionalResonanceRequest)(nil),        // 57: intelligence.EmotionalResonanceRequest
	(*EmotionalResonanceResponse)(nil),       // 58: intelligence.EmotionalResonanceResponse
	(*CompetitiveDiffRequest)(nil),           // 59: intelligence.CompetitiveDiffRequest
	(*CompetitiveDiffResponse)(nil),          // 60: intelligence.CompetitiveDiffResponse
	(*MultimodalRequest)(nil),                // 61: intelligence.MultimodalRequest
	(*MultimodalResponse)(nil),               // 62: intelligence.MultimodalResponse
	(*UserProfile)(nil),                      // 63: intelligence.UserProfile
	(*DemoScene)(nil),                        // 64: intelligence.DemoScene
	(*HistoricalData)(nil),                   // 65: intelligence.HistoricalData
	(*ROIPrediction)(nil),                    // 66: intelligence.ROIPrediction
	(*AIGeneratedContent)(nil),               // 67: intelligence.AIGeneratedContent
	(*SalesContext)(nil),                     // 68: intelligence.SalesContext
	(*ConversationPoint)(nil),                // 69: intelligence.ConversationPoint
	(*EmotionalImpact)(nil),                  // 70: intelligence.EmotionalImpact
	(*DifferentiatorInsight)(nil),            // 71: intelligence.DifferentiatorInsight
	(*StylePreferences)(nil),                 // 72: intelligence.StylePreferences
	(*SynthesisMetric)(nil),                  // 73: intelligence.SynthesisMetric
	(*BenchmarkRequest)(nil),                 // 74: intelligence.BenchmarkRequest
	(*BenchmarkResponse)(nil),                // 75: intelligence.BenchmarkResponse
	(*ChatMessage)(nil),                      // 76: intelligence.ChatMessage
	(*ChatResponse)(nil),                     // 77: intelligence.ChatResponse
	(*VideoChunk)(nil),                       // 78: intelligence.VideoChunk
	(*VideoMetadata)(nil),                    // 79: intelligence.VideoMetadata
	(*VideoSummary)(nil),                     // 80: intelligence.VideoSummary
	nil,                                      // 81: intelligence.DetectFakeTestimonialResponse.FeatureScoresEntry
	nil,                                      // 82: intelligence.GenerateVoiceTestimonialResponse.EmotionConfidenceEntry
	nil,                                      // 83: intelligence.CompetitorAnalysisResponse.SentimentComparisonEntry
	nil,                                      // 84: intelligence.PlacementResponse.PredictedEngagementEntry
	nil,                                      // 85: intelligence.FeatureComparison.CompetitorScoresEntry
	nil,                                      // 86: intelligence.ProductDemoResponse.EngagementMetricsEntry
	nil,                                      // 87: intelligence.SalesConversationResponse.ObjectionHandlersEntry
	nil,                                      // 88: intelligence.CompetitiveDiffResponse.CompetitiveAdvantagesEntry
	nil,                                      // 89: intelligence.MultimodalResponse.ContentUrlsEntry
	(*timestamppb.Timestamp)(nil),            // 90: google.protobuf.Timestamp
}
var file_protobuf_intelligence_proto_depIdxs = []int32{
	22, // 0: intelligence.AnalyzeSentimentResponse.emotions:type_name -> intelligence.EmotionAnalysis
	23, // 1: intelligence.AnalyzeSentimentResponse.aspects:type_name -> intelligence.AspectAnalysis
	24, // 2: intelligence.DetectFakeTestimonialRequest.user_data:type_name -> intelligence.UserMetadata
	81, // 3: intelligence.DetectFakeTestimonialResponse.feature_scores:type_name -> intelligence.DetectFakeTestimonialResponse.FeatureScoresEntry
	25, // 4: intelligence.GenerateVideoTestimonialRequest.avatar_prefs:type_name -> intelligence.AvatarPreferences
	26, // 5: intelligence.GenerateVideoTestimonialRequest.emotion_markers:type_name -> intelligence.EmotionTimestamp
	27, // 6: intelligence.GenerateVoiceTestimonialRequest.emotion_points:type_name -> intelligence.EmotionMarker
	28, // 7: intelligence.GenerateVoiceTestimonialRequest.preferences:type_name -> intelligence.AudioPreferences
	82, // 8: intelligence.GenerateVoiceTestimonialResponse.emotion_confidence:type_name -> intelligence.GenerateVoiceTestimonialResponse.EmotionConfidenceEntry
	29, // 9: intelligence.GenerateStoryRequest.preferences:type_name -> intelligence.StoryPreferences
	30, // 10: intelligence.GenerateStoryResponse.themes:type_name -> intelligence.ThemeAnalysis
	31, // 11: intelligence.CompetitorAnalysisResponse.insights:type_name -> intelligence.CompetitorInsight
	83, // 12: intelligence.CompetitorAnalysisResponse.sentiment_comparison:type_name -> intelligence.CompetitorAnalysisResponse.SentimentComparisonEntry
	32, // 13: intelligence.CompetitorAnalysisResponse.feature_analysis:type_name -> intelligence.FeatureComparison
	33, // 14: intelligence.SentimentPredictionRequest.historical_data:type_name -> intelligence.HistoricalSentiment
	34, // 15: intelligence.SentimentPredictionResponse.predictions:type_name -> intelligence.TimestampedPrediction
	35, // 16: intelligence.SentimentPredictionResponse.contributing_factors:type_name -> intelligence.TrendFactor
	36, // 17: intelligence.PlacementRequest.target_audience:type_name -> intelligence.UserSegment
	37, // 18: intelligence.PlacementResponse.recommendations:type_name -> intelligence.PlacementRecommendation
	84, // 19: intelligence.PlacementResponse.predicted_engagement:type_name -> intelligence.PlacementResponse.PredictedEngagementEntry
	85, // 20: intelligence.FeatureComparison.competitor_scores:type_name -> intelligence.FeatureComparison.CompetitorScoresEntry
	90, // 21: intelligence.HistoricalSentiment.timestamp:type_name -> google.protobuf.Timestamp
	90, // 22: intelligence.TimestampedPrediction.timestamp:type_name -> google.protobuf.Timestamp
	38, // 23: intelligence.JourneyMapResponse.stages:type_name -> intelligence.JourneyStage
	39, // 24: intelligence.JourneyMapResponse.emotional_milestones:type_name -> intelligence.EmotionalMilestone
	63, // 25: intelligence.ProductDemoRequest.target_user:type_name -> intelligence.UserProfile
	64, // 26: intelligence.ProductDemoResponse.scenes:type_name -> intelligence.DemoScene
	86, // 27: intelligence.ProductDemoResponse.engagement_metrics:type_name -> intelligence.ProductDemoResponse.EngagementMetricsEntry
	44, // 28: intelligence.ROIPredictorRequest.company_profile:type_name -> intelligence.CompanyProfile
	65, // 29: intelligence.ROIPredictorRequest.historical_data:type_name -> intelligence.HistoricalData
	66, // 30: intelligence.ROIPredictorResponse.predictions:type_name -> intelligence.ROIPrediction
	67, // 31: intelligence.MicrositeResponse.content_blocks:type_name -> intelligence.AIGeneratedContent
	68, // 32: intelligence.SalesConversationRequest.context:type_name -> intelligence.SalesContext
	69, // 33: intelligence.SalesConversationResponse.talking_points:type_name -> intelligence.ConversationPoint
	87, // 34: intelligence.SalesConversationResponse.objection_handlers:type_name -> intelligence.SalesConversationResponse.ObjectionHandlersEntry
	70, // 35: intelligence.EmotionalResonanceResponse.emotional_impacts:type_name -> intelligence.EmotionalImpact
	71, // 36: intelligence.CompetitiveDiffResponse.differentiators:type_name -> intelligence.DifferentiatorInsight
	88, // 37: intelligence.CompetitiveDiffResponse.competitive_advantages:type_name -> intelligence.CompetitiveDiffResponse.CompetitiveAdvantagesEntry
	72, // 38: intelligence.MultimodalRequest.style_prefs:type_name -> intelligence.StylePreferences
	89, // 39: intelligence.MultimodalResponse.content_urls:type_name -> intelligence.MultimodalResponse.ContentUrlsEntry
	73, // 40: intelligence.MultimodalResponse.quality_metrics:type_name -> intelligence.SynthesisMetric
	66, // 41: intelligence.HistoricalData.past_roi_predictions:type_name -> intelligence.ROIPrediction
	71, // 42: intelligence.BenchmarkResponse.insights:type_name -> intelligence.DifferentiatorInsight
	79, // 43: intelligence.VideoChunk.metadata:type_name -> intelligence.VideoMetadata
	0,  // 44: intelligence.Intelligence.EnhanceTestimonial:input_type -> intelligence.EnhanceTestimonialRequest
	2,  // 45: intelligence.Intelligence.AnalyzeSentiment:input_type -> intelligence.AnalyzeSentimentRequest
	4,  // 46: intelligence.Intelligence.DetectFakeTestimonial:input_type -> intelligence.DetectFakeTestimonialRequest
	12, // 47: intelligence.Intelligence.GenerateStoryFromTestimonials:input_type -> intelligence.GenerateStoryRequest
	6,  // 48: intelligence.Intelligence.TranslateTestimonial:input_type -> intelligence.TranslateTestimonialRequest
	8,  // 49: intelligence.Intelligence.GenerateVideoTestimonial:input_type -> intelligence.GenerateVideoTestimonialRequest
	10, // 50: intelligence.Intelligence.GenerateVoiceTestimonial:input_type -> intelligence.GenerateVoiceTestimonialRequest
	74, // 51: intelligence.Intelligence.BenchmarkAgainstCompetitors:input_type -> intelligence.BenchmarkRequest
	47, // 52: intelligence.Intelligence.GenerateAIJourneyMap:input_type -> intelligence.JourneyMapRequest
	49, // 53: intelligence.Intelligence.GenerateAIProductDemo:input_type -> intelligence.ProductDemoRequest
	51, // 54: intelligence.Intelligence.GenerateAIROIPredictor:input_type -> intelligence.ROIPredictorRequest
	53, // 55: intelligence.Intelligence.GenerateAIMicrosite:input_type -> intelligence.MicrositeRequest
	55, // 56: intelligence.Intelligence.GenerateSalesConversation:input_type -> intelligence.SalesConversationRequest
	57, // 57: intelligence.Intelligence.AnalyzeEmotionalResonance:input_type -> intelligence.EmotionalResonanceRequest
	59, // 58: intelligence.Intelligence.AnalyzeCompetitiveDifferentiators:input_type -> intelligence.CompetitiveDiffRequest
	61, // 59: intelligence.Intelligence.SynthesizeMultimodalTestimonial:input_type -> intelligence.MultimodalRequest
	76, // 60: intelligence.Intelligence.ChatStream:input_type -> intelligence.ChatMessage
	78, // 61: intelligence.Intelligence.ProcessVideoByChunks:input_type -> intelligence.VideoChunk
	1,  // 62: intelligence.Intelligence.EnhanceTestimonial:output_type -> intelligence.EnhanceTestimonialResponse
	3,  // 63: intelligence.Intelligence.AnalyzeSentiment:output_type -> intelligence.AnalyzeSentimentResponse
	5,  // 64: intelligence.Intelligence.DetectFakeTestimonial:output_type -> intelligence.DetectFakeTestimonialResponse
	13, // 65: intelligence.Intelligence.GenerateStoryFromTestimonials:output_type -> intelligence.GenerateStoryResponse
	7,  // 66: intelligence.Intelligence.TranslateTestimonial:output_type -> intelligence.TranslateTestimonialResponse
	9,  // 67: intelligence.Intelligence.GenerateVideoTestimonial:output_type -> intelligence.GenerateVideoTestimonialResponse
	11, // 68: intelligence.Intelligence.GenerateVoiceTestimonial:output_type -> intelligence.GenerateVoiceTestimonialResponse
	75, // 69: intelligence.Intelligence.BenchmarkAgainstCompetitors:output_type -> intelligence.BenchmarkResponse
	48, // 70: intelligence.Intelligence.GenerateAIJourneyMap:output_type -> intelligence.JourneyMapResponse
	50, // 71: intelligence.Intelligence.GenerateAIProductDemo:output_type -> intelligence.ProductDemoResponse
	52, // 72: intelligence.Intelligence.GenerateAIROIPredictor:output_type -> intelligence.ROIPredictorResponse
	54, // 73: intelligence.Intelligence.GenerateAIMicrosite:output_type -> intelligence.MicrositeResponse
	56, // 74: intelligence.Intelligence.GenerateSalesConversation:output_type -> intelligence.SalesConversationResponse
	58, // 75: intelligence.Intelligence.AnalyzeEmotionalResonance:output_type -> intelligence.EmotionalResonanceResponse
	60, // 76: intelligence.Intelligence.AnalyzeCompetitiveDifferentiators:output_type -> intelligence.CompetitiveDiffResponse
	62, // 77: intelligence.Intelligence.SynthesizeMultimodalTestimonial:output_type -> intelligence.MultimodalResponse
	77, // 78: intelligence.Intelligence.ChatStream:output_type -> intelligence.ChatResponse
	80, // 79: intelligence.Intelligence.ProcessVideoByChunks:output_type -> intelligence.VideoSummary
	62, // [62:80] is the sub-list for method output_type
	44, // [44:62] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_protobuf_intelligence_proto_init() }
func file_protobuf_intelligence_proto_init() {
	if File_protobuf_intelligence_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_intelligence_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   90,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_intelligence_proto_goTypes,
		DependencyIndexes: file_protobuf_intelligence_proto_depIdxs,
		MessageInfos:      file_protobuf_intelligence_proto_msgTypes,
	}.Build()
	File_protobuf_intelligence_proto = out.File
	file_protobuf_intelligence_proto_rawDesc = nil
	file_protobuf_intelligence_proto_goTypes = nil
	file_protobuf_intelligence_proto_depIdxs = nil
}
