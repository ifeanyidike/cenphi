// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: protobuf/intelligence.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Intelligence_EnhanceTestimonial_FullMethodName                = "/intelligence.Intelligence/EnhanceTestimonial"
	Intelligence_AnalyzeSentiment_FullMethodName                  = "/intelligence.Intelligence/AnalyzeSentiment"
	Intelligence_DetectFakeTestimonial_FullMethodName             = "/intelligence.Intelligence/DetectFakeTestimonial"
	Intelligence_GenerateStoryFromTestimonials_FullMethodName     = "/intelligence.Intelligence/GenerateStoryFromTestimonials"
	Intelligence_TranslateTestimonial_FullMethodName              = "/intelligence.Intelligence/TranslateTestimonial"
	Intelligence_GenerateVideoTestimonial_FullMethodName          = "/intelligence.Intelligence/GenerateVideoTestimonial"
	Intelligence_GenerateVoiceTestimonial_FullMethodName          = "/intelligence.Intelligence/GenerateVoiceTestimonial"
	Intelligence_BenchmarkAgainstCompetitors_FullMethodName       = "/intelligence.Intelligence/BenchmarkAgainstCompetitors"
	Intelligence_GenerateAIJourneyMap_FullMethodName              = "/intelligence.Intelligence/GenerateAIJourneyMap"
	Intelligence_GenerateAIProductDemo_FullMethodName             = "/intelligence.Intelligence/GenerateAIProductDemo"
	Intelligence_GenerateAIROIPredictor_FullMethodName            = "/intelligence.Intelligence/GenerateAIROIPredictor"
	Intelligence_GenerateAIMicrosite_FullMethodName               = "/intelligence.Intelligence/GenerateAIMicrosite"
	Intelligence_GenerateSalesConversation_FullMethodName         = "/intelligence.Intelligence/GenerateSalesConversation"
	Intelligence_AnalyzeEmotionalResonance_FullMethodName         = "/intelligence.Intelligence/AnalyzeEmotionalResonance"
	Intelligence_AnalyzeCompetitiveDifferentiators_FullMethodName = "/intelligence.Intelligence/AnalyzeCompetitiveDifferentiators"
	Intelligence_SynthesizeMultimodalTestimonial_FullMethodName   = "/intelligence.Intelligence/SynthesizeMultimodalTestimonial"
	Intelligence_ChatStream_FullMethodName                        = "/intelligence.Intelligence/ChatStream"
	Intelligence_ProcessVideoByChunks_FullMethodName              = "/intelligence.Intelligence/ProcessVideoByChunks"
)

// IntelligenceClient is the client API for Intelligence service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service defining comprehensive AI-powered testimonial processing
type IntelligenceClient interface {
	// Enhances testimonials by improving clarity, grammar, and emotional impact while
	// preserving authenticity
	EnhanceTestimonial(ctx context.Context, in *EnhanceTestimonialRequest, opts ...grpc.CallOption) (*EnhanceTestimonialResponse, error)
	// Performs comprehensive sentiment analysis including customer satisfaction scoring,
	// key pain points, and improvement suggestions
	AnalyzeSentiment(ctx context.Context, in *AnalyzeSentimentRequest, opts ...grpc.CallOption) (*AnalyzeSentimentResponse, error)
	// Advanced fake review detection using multi-modal analysis (text patterns, metadata,
	// user behavior)
	DetectFakeTestimonial(ctx context.Context, in *DetectFakeTestimonialRequest, opts ...grpc.CallOption) (*DetectFakeTestimonialResponse, error)
	// Transforms testimonials into compelling success stories with business impact metrics
	GenerateStoryFromTestimonials(ctx context.Context, in *GenerateStoryRequest, opts ...grpc.CallOption) (*GenerateStoryResponse, error)
	// Context-aware translation that preserves emotional nuance and cultural relevance
	TranslateTestimonial(ctx context.Context, in *TranslateTestimonialRequest, opts ...grpc.CallOption) (*TranslateTestimonialResponse, error)
	// Creates dynamic video testimonials with AI-generated avatars, expressions, and
	// voice synchronization
	GenerateVideoTestimonial(ctx context.Context, in *GenerateVideoTestimonialRequest, opts ...grpc.CallOption) (*GenerateVideoTestimonialResponse, error)
	// Generates natural-sounding voice testimonials with emotion-aware voice modulation
	GenerateVoiceTestimonial(ctx context.Context, in *GenerateVoiceTestimonialRequest, opts ...grpc.CallOption) (*GenerateVoiceTestimonialResponse, error)
	// Real-time competitor testimonial analysis and benchmarking
	BenchmarkAgainstCompetitors(ctx context.Context, in *BenchmarkRequest, opts ...grpc.CallOption) (*BenchmarkResponse, error)
	// AI-powered journey mapping and visualization
	GenerateAIJourneyMap(ctx context.Context, in *JourneyMapRequest, opts ...grpc.CallOption) (*JourneyMapResponse, error)
	// Personalized demo generation using testimonial insights
	GenerateAIProductDemo(ctx context.Context, in *ProductDemoRequest, opts ...grpc.CallOption) (*ProductDemoResponse, error)
	// AI-driven ROI prediction and visualization
	GenerateAIROIPredictor(ctx context.Context, in *ROIPredictorRequest, opts ...grpc.CallOption) (*ROIPredictorResponse, error)
	// Creates personalized microsites using AI content generation
	GenerateAIMicrosite(ctx context.Context, in *MicrositeRequest, opts ...grpc.CallOption) (*MicrositeResponse, error)
	// AI-powered sales conversation generator
	GenerateSalesConversation(ctx context.Context, in *SalesConversationRequest, opts ...grpc.CallOption) (*SalesConversationResponse, error)
	// Emotional resonance analyzer and optimizer
	AnalyzeEmotionalResonance(ctx context.Context, in *EmotionalResonanceRequest, opts ...grpc.CallOption) (*EmotionalResonanceResponse, error)
	// AI competitive differentiator analysis
	AnalyzeCompetitiveDifferentiators(ctx context.Context, in *CompetitiveDiffRequest, opts ...grpc.CallOption) (*CompetitiveDiffResponse, error)
	// Multimodal testimonial synthesis (text, audio, video)
	SynthesizeMultimodalTestimonial(ctx context.Context, in *MultimodalRequest, opts ...grpc.CallOption) (*MultimodalResponse, error)
	// A bidirectional streaming RPC: both client and server send streams of messages.
	ChatStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatResponse], error)
	// A client-side streaming RPC: the client sends a stream of VideoChunk
	// messages and then waits for a single VideoSummary response.
	ProcessVideoByChunks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[VideoChunk, VideoSummary], error)
}

type intelligenceClient struct {
	cc grpc.ClientConnInterface
}

func NewIntelligenceClient(cc grpc.ClientConnInterface) IntelligenceClient {
	return &intelligenceClient{cc}
}

func (c *intelligenceClient) EnhanceTestimonial(ctx context.Context, in *EnhanceTestimonialRequest, opts ...grpc.CallOption) (*EnhanceTestimonialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EnhanceTestimonialResponse)
	err := c.cc.Invoke(ctx, Intelligence_EnhanceTestimonial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) AnalyzeSentiment(ctx context.Context, in *AnalyzeSentimentRequest, opts ...grpc.CallOption) (*AnalyzeSentimentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeSentimentResponse)
	err := c.cc.Invoke(ctx, Intelligence_AnalyzeSentiment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) DetectFakeTestimonial(ctx context.Context, in *DetectFakeTestimonialRequest, opts ...grpc.CallOption) (*DetectFakeTestimonialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetectFakeTestimonialResponse)
	err := c.cc.Invoke(ctx, Intelligence_DetectFakeTestimonial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) GenerateStoryFromTestimonials(ctx context.Context, in *GenerateStoryRequest, opts ...grpc.CallOption) (*GenerateStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateStoryResponse)
	err := c.cc.Invoke(ctx, Intelligence_GenerateStoryFromTestimonials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) TranslateTestimonial(ctx context.Context, in *TranslateTestimonialRequest, opts ...grpc.CallOption) (*TranslateTestimonialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateTestimonialResponse)
	err := c.cc.Invoke(ctx, Intelligence_TranslateTestimonial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) GenerateVideoTestimonial(ctx context.Context, in *GenerateVideoTestimonialRequest, opts ...grpc.CallOption) (*GenerateVideoTestimonialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateVideoTestimonialResponse)
	err := c.cc.Invoke(ctx, Intelligence_GenerateVideoTestimonial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) GenerateVoiceTestimonial(ctx context.Context, in *GenerateVoiceTestimonialRequest, opts ...grpc.CallOption) (*GenerateVoiceTestimonialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateVoiceTestimonialResponse)
	err := c.cc.Invoke(ctx, Intelligence_GenerateVoiceTestimonial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) BenchmarkAgainstCompetitors(ctx context.Context, in *BenchmarkRequest, opts ...grpc.CallOption) (*BenchmarkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BenchmarkResponse)
	err := c.cc.Invoke(ctx, Intelligence_BenchmarkAgainstCompetitors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) GenerateAIJourneyMap(ctx context.Context, in *JourneyMapRequest, opts ...grpc.CallOption) (*JourneyMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JourneyMapResponse)
	err := c.cc.Invoke(ctx, Intelligence_GenerateAIJourneyMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) GenerateAIProductDemo(ctx context.Context, in *ProductDemoRequest, opts ...grpc.CallOption) (*ProductDemoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductDemoResponse)
	err := c.cc.Invoke(ctx, Intelligence_GenerateAIProductDemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) GenerateAIROIPredictor(ctx context.Context, in *ROIPredictorRequest, opts ...grpc.CallOption) (*ROIPredictorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ROIPredictorResponse)
	err := c.cc.Invoke(ctx, Intelligence_GenerateAIROIPredictor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) GenerateAIMicrosite(ctx context.Context, in *MicrositeRequest, opts ...grpc.CallOption) (*MicrositeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MicrositeResponse)
	err := c.cc.Invoke(ctx, Intelligence_GenerateAIMicrosite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) GenerateSalesConversation(ctx context.Context, in *SalesConversationRequest, opts ...grpc.CallOption) (*SalesConversationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SalesConversationResponse)
	err := c.cc.Invoke(ctx, Intelligence_GenerateSalesConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) AnalyzeEmotionalResonance(ctx context.Context, in *EmotionalResonanceRequest, opts ...grpc.CallOption) (*EmotionalResonanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmotionalResonanceResponse)
	err := c.cc.Invoke(ctx, Intelligence_AnalyzeEmotionalResonance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) AnalyzeCompetitiveDifferentiators(ctx context.Context, in *CompetitiveDiffRequest, opts ...grpc.CallOption) (*CompetitiveDiffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompetitiveDiffResponse)
	err := c.cc.Invoke(ctx, Intelligence_AnalyzeCompetitiveDifferentiators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) SynthesizeMultimodalTestimonial(ctx context.Context, in *MultimodalRequest, opts ...grpc.CallOption) (*MultimodalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultimodalResponse)
	err := c.cc.Invoke(ctx, Intelligence_SynthesizeMultimodalTestimonial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intelligenceClient) ChatStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChatMessage, ChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Intelligence_ServiceDesc.Streams[0], Intelligence_ChatStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatMessage, ChatResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Intelligence_ChatStreamClient = grpc.BidiStreamingClient[ChatMessage, ChatResponse]

func (c *intelligenceClient) ProcessVideoByChunks(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[VideoChunk, VideoSummary], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Intelligence_ServiceDesc.Streams[1], Intelligence_ProcessVideoByChunks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[VideoChunk, VideoSummary]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Intelligence_ProcessVideoByChunksClient = grpc.ClientStreamingClient[VideoChunk, VideoSummary]

// IntelligenceServer is the server API for Intelligence service.
// All implementations must embed UnimplementedIntelligenceServer
// for forward compatibility.
//
// Service defining comprehensive AI-powered testimonial processing
type IntelligenceServer interface {
	// Enhances testimonials by improving clarity, grammar, and emotional impact while
	// preserving authenticity
	EnhanceTestimonial(context.Context, *EnhanceTestimonialRequest) (*EnhanceTestimonialResponse, error)
	// Performs comprehensive sentiment analysis including customer satisfaction scoring,
	// key pain points, and improvement suggestions
	AnalyzeSentiment(context.Context, *AnalyzeSentimentRequest) (*AnalyzeSentimentResponse, error)
	// Advanced fake review detection using multi-modal analysis (text patterns, metadata,
	// user behavior)
	DetectFakeTestimonial(context.Context, *DetectFakeTestimonialRequest) (*DetectFakeTestimonialResponse, error)
	// Transforms testimonials into compelling success stories with business impact metrics
	GenerateStoryFromTestimonials(context.Context, *GenerateStoryRequest) (*GenerateStoryResponse, error)
	// Context-aware translation that preserves emotional nuance and cultural relevance
	TranslateTestimonial(context.Context, *TranslateTestimonialRequest) (*TranslateTestimonialResponse, error)
	// Creates dynamic video testimonials with AI-generated avatars, expressions, and
	// voice synchronization
	GenerateVideoTestimonial(context.Context, *GenerateVideoTestimonialRequest) (*GenerateVideoTestimonialResponse, error)
	// Generates natural-sounding voice testimonials with emotion-aware voice modulation
	GenerateVoiceTestimonial(context.Context, *GenerateVoiceTestimonialRequest) (*GenerateVoiceTestimonialResponse, error)
	// Real-time competitor testimonial analysis and benchmarking
	BenchmarkAgainstCompetitors(context.Context, *BenchmarkRequest) (*BenchmarkResponse, error)
	// AI-powered journey mapping and visualization
	GenerateAIJourneyMap(context.Context, *JourneyMapRequest) (*JourneyMapResponse, error)
	// Personalized demo generation using testimonial insights
	GenerateAIProductDemo(context.Context, *ProductDemoRequest) (*ProductDemoResponse, error)
	// AI-driven ROI prediction and visualization
	GenerateAIROIPredictor(context.Context, *ROIPredictorRequest) (*ROIPredictorResponse, error)
	// Creates personalized microsites using AI content generation
	GenerateAIMicrosite(context.Context, *MicrositeRequest) (*MicrositeResponse, error)
	// AI-powered sales conversation generator
	GenerateSalesConversation(context.Context, *SalesConversationRequest) (*SalesConversationResponse, error)
	// Emotional resonance analyzer and optimizer
	AnalyzeEmotionalResonance(context.Context, *EmotionalResonanceRequest) (*EmotionalResonanceResponse, error)
	// AI competitive differentiator analysis
	AnalyzeCompetitiveDifferentiators(context.Context, *CompetitiveDiffRequest) (*CompetitiveDiffResponse, error)
	// Multimodal testimonial synthesis (text, audio, video)
	SynthesizeMultimodalTestimonial(context.Context, *MultimodalRequest) (*MultimodalResponse, error)
	// A bidirectional streaming RPC: both client and server send streams of messages.
	ChatStream(grpc.BidiStreamingServer[ChatMessage, ChatResponse]) error
	// A client-side streaming RPC: the client sends a stream of VideoChunk
	// messages and then waits for a single VideoSummary response.
	ProcessVideoByChunks(grpc.ClientStreamingServer[VideoChunk, VideoSummary]) error
	mustEmbedUnimplementedIntelligenceServer()
}

// UnimplementedIntelligenceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntelligenceServer struct{}

func (UnimplementedIntelligenceServer) EnhanceTestimonial(context.Context, *EnhanceTestimonialRequest) (*EnhanceTestimonialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnhanceTestimonial not implemented")
}
func (UnimplementedIntelligenceServer) AnalyzeSentiment(context.Context, *AnalyzeSentimentRequest) (*AnalyzeSentimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeSentiment not implemented")
}
func (UnimplementedIntelligenceServer) DetectFakeTestimonial(context.Context, *DetectFakeTestimonialRequest) (*DetectFakeTestimonialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectFakeTestimonial not implemented")
}
func (UnimplementedIntelligenceServer) GenerateStoryFromTestimonials(context.Context, *GenerateStoryRequest) (*GenerateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateStoryFromTestimonials not implemented")
}
func (UnimplementedIntelligenceServer) TranslateTestimonial(context.Context, *TranslateTestimonialRequest) (*TranslateTestimonialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateTestimonial not implemented")
}
func (UnimplementedIntelligenceServer) GenerateVideoTestimonial(context.Context, *GenerateVideoTestimonialRequest) (*GenerateVideoTestimonialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVideoTestimonial not implemented")
}
func (UnimplementedIntelligenceServer) GenerateVoiceTestimonial(context.Context, *GenerateVoiceTestimonialRequest) (*GenerateVoiceTestimonialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateVoiceTestimonial not implemented")
}
func (UnimplementedIntelligenceServer) BenchmarkAgainstCompetitors(context.Context, *BenchmarkRequest) (*BenchmarkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BenchmarkAgainstCompetitors not implemented")
}
func (UnimplementedIntelligenceServer) GenerateAIJourneyMap(context.Context, *JourneyMapRequest) (*JourneyMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAIJourneyMap not implemented")
}
func (UnimplementedIntelligenceServer) GenerateAIProductDemo(context.Context, *ProductDemoRequest) (*ProductDemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAIProductDemo not implemented")
}
func (UnimplementedIntelligenceServer) GenerateAIROIPredictor(context.Context, *ROIPredictorRequest) (*ROIPredictorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAIROIPredictor not implemented")
}
func (UnimplementedIntelligenceServer) GenerateAIMicrosite(context.Context, *MicrositeRequest) (*MicrositeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAIMicrosite not implemented")
}
func (UnimplementedIntelligenceServer) GenerateSalesConversation(context.Context, *SalesConversationRequest) (*SalesConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSalesConversation not implemented")
}
func (UnimplementedIntelligenceServer) AnalyzeEmotionalResonance(context.Context, *EmotionalResonanceRequest) (*EmotionalResonanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeEmotionalResonance not implemented")
}
func (UnimplementedIntelligenceServer) AnalyzeCompetitiveDifferentiators(context.Context, *CompetitiveDiffRequest) (*CompetitiveDiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeCompetitiveDifferentiators not implemented")
}
func (UnimplementedIntelligenceServer) SynthesizeMultimodalTestimonial(context.Context, *MultimodalRequest) (*MultimodalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SynthesizeMultimodalTestimonial not implemented")
}
func (UnimplementedIntelligenceServer) ChatStream(grpc.BidiStreamingServer[ChatMessage, ChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedIntelligenceServer) ProcessVideoByChunks(grpc.ClientStreamingServer[VideoChunk, VideoSummary]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessVideoByChunks not implemented")
}
func (UnimplementedIntelligenceServer) mustEmbedUnimplementedIntelligenceServer() {}
func (UnimplementedIntelligenceServer) testEmbeddedByValue()                      {}

// UnsafeIntelligenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntelligenceServer will
// result in compilation errors.
type UnsafeIntelligenceServer interface {
	mustEmbedUnimplementedIntelligenceServer()
}

func RegisterIntelligenceServer(s grpc.ServiceRegistrar, srv IntelligenceServer) {
	// If the following call pancis, it indicates UnimplementedIntelligenceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Intelligence_ServiceDesc, srv)
}

func _Intelligence_EnhanceTestimonial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnhanceTestimonialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).EnhanceTestimonial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_EnhanceTestimonial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).EnhanceTestimonial(ctx, req.(*EnhanceTestimonialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_AnalyzeSentiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeSentimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).AnalyzeSentiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_AnalyzeSentiment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).AnalyzeSentiment(ctx, req.(*AnalyzeSentimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_DetectFakeTestimonial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectFakeTestimonialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).DetectFakeTestimonial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_DetectFakeTestimonial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).DetectFakeTestimonial(ctx, req.(*DetectFakeTestimonialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_GenerateStoryFromTestimonials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).GenerateStoryFromTestimonials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_GenerateStoryFromTestimonials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).GenerateStoryFromTestimonials(ctx, req.(*GenerateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_TranslateTestimonial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateTestimonialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).TranslateTestimonial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_TranslateTestimonial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).TranslateTestimonial(ctx, req.(*TranslateTestimonialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_GenerateVideoTestimonial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateVideoTestimonialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).GenerateVideoTestimonial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_GenerateVideoTestimonial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).GenerateVideoTestimonial(ctx, req.(*GenerateVideoTestimonialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_GenerateVoiceTestimonial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateVoiceTestimonialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).GenerateVoiceTestimonial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_GenerateVoiceTestimonial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).GenerateVoiceTestimonial(ctx, req.(*GenerateVoiceTestimonialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_BenchmarkAgainstCompetitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BenchmarkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).BenchmarkAgainstCompetitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_BenchmarkAgainstCompetitors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).BenchmarkAgainstCompetitors(ctx, req.(*BenchmarkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_GenerateAIJourneyMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JourneyMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).GenerateAIJourneyMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_GenerateAIJourneyMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).GenerateAIJourneyMap(ctx, req.(*JourneyMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_GenerateAIProductDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).GenerateAIProductDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_GenerateAIProductDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).GenerateAIProductDemo(ctx, req.(*ProductDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_GenerateAIROIPredictor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ROIPredictorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).GenerateAIROIPredictor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_GenerateAIROIPredictor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).GenerateAIROIPredictor(ctx, req.(*ROIPredictorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_GenerateAIMicrosite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MicrositeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).GenerateAIMicrosite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_GenerateAIMicrosite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).GenerateAIMicrosite(ctx, req.(*MicrositeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_GenerateSalesConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).GenerateSalesConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_GenerateSalesConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).GenerateSalesConversation(ctx, req.(*SalesConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_AnalyzeEmotionalResonance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmotionalResonanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).AnalyzeEmotionalResonance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_AnalyzeEmotionalResonance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).AnalyzeEmotionalResonance(ctx, req.(*EmotionalResonanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_AnalyzeCompetitiveDifferentiators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompetitiveDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).AnalyzeCompetitiveDifferentiators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_AnalyzeCompetitiveDifferentiators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).AnalyzeCompetitiveDifferentiators(ctx, req.(*CompetitiveDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_SynthesizeMultimodalTestimonial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultimodalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntelligenceServer).SynthesizeMultimodalTestimonial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Intelligence_SynthesizeMultimodalTestimonial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntelligenceServer).SynthesizeMultimodalTestimonial(ctx, req.(*MultimodalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Intelligence_ChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IntelligenceServer).ChatStream(&grpc.GenericServerStream[ChatMessage, ChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Intelligence_ChatStreamServer = grpc.BidiStreamingServer[ChatMessage, ChatResponse]

func _Intelligence_ProcessVideoByChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IntelligenceServer).ProcessVideoByChunks(&grpc.GenericServerStream[VideoChunk, VideoSummary]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Intelligence_ProcessVideoByChunksServer = grpc.ClientStreamingServer[VideoChunk, VideoSummary]

// Intelligence_ServiceDesc is the grpc.ServiceDesc for Intelligence service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Intelligence_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "intelligence.Intelligence",
	HandlerType: (*IntelligenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnhanceTestimonial",
			Handler:    _Intelligence_EnhanceTestimonial_Handler,
		},
		{
			MethodName: "AnalyzeSentiment",
			Handler:    _Intelligence_AnalyzeSentiment_Handler,
		},
		{
			MethodName: "DetectFakeTestimonial",
			Handler:    _Intelligence_DetectFakeTestimonial_Handler,
		},
		{
			MethodName: "GenerateStoryFromTestimonials",
			Handler:    _Intelligence_GenerateStoryFromTestimonials_Handler,
		},
		{
			MethodName: "TranslateTestimonial",
			Handler:    _Intelligence_TranslateTestimonial_Handler,
		},
		{
			MethodName: "GenerateVideoTestimonial",
			Handler:    _Intelligence_GenerateVideoTestimonial_Handler,
		},
		{
			MethodName: "GenerateVoiceTestimonial",
			Handler:    _Intelligence_GenerateVoiceTestimonial_Handler,
		},
		{
			MethodName: "BenchmarkAgainstCompetitors",
			Handler:    _Intelligence_BenchmarkAgainstCompetitors_Handler,
		},
		{
			MethodName: "GenerateAIJourneyMap",
			Handler:    _Intelligence_GenerateAIJourneyMap_Handler,
		},
		{
			MethodName: "GenerateAIProductDemo",
			Handler:    _Intelligence_GenerateAIProductDemo_Handler,
		},
		{
			MethodName: "GenerateAIROIPredictor",
			Handler:    _Intelligence_GenerateAIROIPredictor_Handler,
		},
		{
			MethodName: "GenerateAIMicrosite",
			Handler:    _Intelligence_GenerateAIMicrosite_Handler,
		},
		{
			MethodName: "GenerateSalesConversation",
			Handler:    _Intelligence_GenerateSalesConversation_Handler,
		},
		{
			MethodName: "AnalyzeEmotionalResonance",
			Handler:    _Intelligence_AnalyzeEmotionalResonance_Handler,
		},
		{
			MethodName: "AnalyzeCompetitiveDifferentiators",
			Handler:    _Intelligence_AnalyzeCompetitiveDifferentiators_Handler,
		},
		{
			MethodName: "SynthesizeMultimodalTestimonial",
			Handler:    _Intelligence_SynthesizeMultimodalTestimonial_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatStream",
			Handler:       _Intelligence_ChatStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProcessVideoByChunks",
			Handler:       _Intelligence_ProcessVideoByChunks_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/intelligence.proto",
}
