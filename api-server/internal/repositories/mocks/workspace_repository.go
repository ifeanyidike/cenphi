// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ifeanyidike/cenphi/internal/models"
	mock "github.com/stretchr/testify/mock"

	repositories "github.com/ifeanyidike/cenphi/internal/repositories"

	uuid "github.com/google/uuid"
)

// WorkspaceRepository is an autogenerated mock type for the WorkspaceRepository type
type WorkspaceRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, entity, db
func (_m *WorkspaceRepository) Create(ctx context.Context, entity *models.Workspace, db repositories.DB) error {
	ret := _m.Called(ctx, entity, db)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace, repositories.DB) error); ok {
		r0 = rf(ctx, entity, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id, db
func (_m *WorkspaceRepository) Delete(ctx context.Context, id uuid.UUID, db repositories.DB) error {
	ret := _m.Called(ctx, id, db)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) error); ok {
		r0 = rf(ctx, id, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByCustomDomain provides a mock function with given fields: ctx, customDomain, db
func (_m *WorkspaceRepository) FindByCustomDomain(ctx context.Context, customDomain string, db repositories.DB) (*models.Workspace, error) {
	ret := _m.Called(ctx, customDomain, db)

	if len(ret) == 0 {
		panic("no return value specified for FindByCustomDomain")
	}

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, repositories.DB) (*models.Workspace, error)); ok {
		return rf(ctx, customDomain, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, repositories.DB) *models.Workspace); ok {
		r0 = rf(ctx, customDomain, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, repositories.DB) error); ok {
		r1 = rf(ctx, customDomain, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id, db
func (_m *WorkspaceRepository) GetByID(ctx context.Context, id uuid.UUID, db repositories.DB) (*models.Workspace, error) {
	ret := _m.Called(ctx, id, db)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.Workspace
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) (*models.Workspace, error)); ok {
		return rf(ctx, id, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) *models.Workspace); ok {
		r0 = rf(ctx, id, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Workspace)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, repositories.DB) error); ok {
		r1 = rf(ctx, id, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, entity, id, db
func (_m *WorkspaceRepository) Update(ctx context.Context, entity *models.Workspace, id uuid.UUID, db repositories.DB) error {
	ret := _m.Called(ctx, entity, id, db)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Workspace, uuid.UUID, repositories.DB) error); ok {
		r0 = rf(ctx, entity, id, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAny provides a mock function with given fields: ctx, updates, id, db
func (_m *WorkspaceRepository) UpdateAny(ctx context.Context, updates map[string]interface{}, id uuid.UUID, db repositories.DB) error {
	ret := _m.Called(ctx, updates, id, db)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAny")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, uuid.UUID, repositories.DB) error); ok {
		r0 = rf(ctx, updates, id, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWorkspaceRepository creates a new instance of WorkspaceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkspaceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkspaceRepository {
	mock := &WorkspaceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
