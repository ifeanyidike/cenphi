// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ifeanyidike/cenphi/internal/models"
	mock "github.com/stretchr/testify/mock"

	repositories "github.com/ifeanyidike/cenphi/internal/repositories"

	uuid "github.com/google/uuid"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, entity, db
func (_m *UserRepository) Create(ctx context.Context, entity *models.User, db repositories.DB) error {
	ret := _m.Called(ctx, entity, db)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, repositories.DB) error); ok {
		r0 = rf(ctx, entity, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id, db
func (_m *UserRepository) Delete(ctx context.Context, id uuid.UUID, db repositories.DB) error {
	ret := _m.Called(ctx, id, db)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) error); ok {
		r0 = rf(ctx, id, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByEmail provides a mock function with given fields: ctx, email, db
func (_m *UserRepository) FindByEmail(ctx context.Context, email string, db repositories.DB) (*models.User, error) {
	ret := _m.Called(ctx, email, db)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, repositories.DB) (*models.User, error)); ok {
		return rf(ctx, email, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, repositories.DB) *models.User); ok {
		r0 = rf(ctx, email, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, repositories.DB) error); ok {
		r1 = rf(ctx, email, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUID provides a mock function with given fields: ctx, uid, db
func (_m *UserRepository) FindByUID(ctx context.Context, uid string, db repositories.DB) (*models.User, error) {
	ret := _m.Called(ctx, uid, db)

	if len(ret) == 0 {
		panic("no return value specified for FindByUID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, repositories.DB) (*models.User, error)); ok {
		return rf(ctx, uid, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, repositories.DB) *models.User); ok {
		r0 = rf(ctx, uid, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, repositories.DB) error); ok {
		r1 = rf(ctx, uid, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id, db
func (_m *UserRepository) GetByID(ctx context.Context, id uuid.UUID, db repositories.DB) (*models.User, error) {
	ret := _m.Called(ctx, id, db)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) (*models.User, error)); ok {
		return rf(ctx, id, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) *models.User); ok {
		r0 = rf(ctx, id, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, repositories.DB) error); ok {
		r1 = rf(ctx, id, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, entity, id, db
func (_m *UserRepository) Update(ctx context.Context, entity *models.User, id uuid.UUID, db repositories.DB) error {
	ret := _m.Called(ctx, entity, id, db)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User, uuid.UUID, repositories.DB) error); ok {
		r0 = rf(ctx, entity, id, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAny provides a mock function with given fields: ctx, updates, uid, db
func (_m *UserRepository) UpdateAny(ctx context.Context, updates map[string]interface{}, uid string, db repositories.DB) error {
	ret := _m.Called(ctx, updates, uid, db)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAny")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, string, repositories.DB) error); ok {
		r0 = rf(ctx, updates, uid, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
