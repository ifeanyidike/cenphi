// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ifeanyidike/cenphi/internal/models"
	mock "github.com/stretchr/testify/mock"

	repositories "github.com/ifeanyidike/cenphi/internal/repositories"

	uuid "github.com/google/uuid"
)

// TeamMemberRepository is an autogenerated mock type for the TeamMemberRepository type
type TeamMemberRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, entity, db
func (_m *TeamMemberRepository) Create(ctx context.Context, entity *models.TeamMember, db repositories.DB) error {
	ret := _m.Called(ctx, entity, db)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMember, repositories.DB) error); ok {
		r0 = rf(ctx, entity, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id, db
func (_m *TeamMemberRepository) Delete(ctx context.Context, id uuid.UUID, db repositories.DB) error {
	ret := _m.Called(ctx, id, db)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) error); ok {
		r0 = rf(ctx, id, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id, db
func (_m *TeamMemberRepository) GetByID(ctx context.Context, id uuid.UUID, db repositories.DB) (*models.TeamMember, error) {
	ret := _m.Called(ctx, id, db)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) (*models.TeamMember, error)); ok {
		return rf(ctx, id, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) *models.TeamMember); ok {
		r0 = rf(ctx, id, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, repositories.DB) error); ok {
		r1 = rf(ctx, id, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByWorkspaceID provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *TeamMemberRepository) GetByWorkspaceID(_a0 context.Context, _a1 uuid.UUID, _a2 int, _a3 int, _a4 repositories.DB) ([]*models.TeamMember, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for GetByWorkspaceID")
	}

	var r0 []*models.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int, repositories.DB) ([]*models.TeamMember, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int, repositories.DB) []*models.TeamMember); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int, repositories.DB) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataByID provides a mock function with given fields: _a0, _a1, _a2
func (_m *TeamMemberRepository) GetDataByID(_a0 context.Context, _a1 uuid.UUID, _a2 repositories.DB) (*models.TeamMemberGetParams, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetDataByID")
	}

	var r0 *models.TeamMemberGetParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) (*models.TeamMemberGetParams, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) *models.TeamMemberGetParams); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMemberGetParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, repositories.DB) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataByUserID provides a mock function with given fields: _a0, _a1, _a2
func (_m *TeamMemberRepository) GetDataByUserID(_a0 context.Context, _a1 uuid.UUID, _a2 repositories.DB) (*models.TeamMemberGetParams, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetDataByUserID")
	}

	var r0 *models.TeamMemberGetParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) (*models.TeamMemberGetParams, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repositories.DB) *models.TeamMemberGetParams); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMemberGetParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, repositories.DB) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, entity, id, db
func (_m *TeamMemberRepository) Update(ctx context.Context, entity *models.TeamMember, id uuid.UUID, db repositories.DB) error {
	ret := _m.Called(ctx, entity, id, db)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMember, uuid.UUID, repositories.DB) error); ok {
		r0 = rf(ctx, entity, id, db)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTeamMemberRepository creates a new instance of TeamMemberRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeamMemberRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeamMemberRepository {
	mock := &TeamMemberRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
