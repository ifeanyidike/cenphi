// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/ifeanyidike/cenphi/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TeamMemberService is an autogenerated mock type for the TeamMemberService type
type TeamMemberService struct {
	mock.Mock
}

// AddTeamMember provides a mock function with given fields: ctx, teamMember
func (_m *TeamMemberService) AddTeamMember(ctx context.Context, teamMember *models.TeamMember) error {
	ret := _m.Called(ctx, teamMember)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMember) error); ok {
		r0 = rf(ctx, teamMember)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTeamMemberData provides a mock function with given fields: ctx, id
func (_m *TeamMemberService) GetTeamMemberData(ctx context.Context, id uuid.UUID) (*models.TeamMemberGetParams, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMemberData")
	}

	var r0 *models.TeamMemberGetParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.TeamMemberGetParams, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.TeamMemberGetParams); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMemberGetParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamMemberDataByUserID provides a mock function with given fields: ctx, id
func (_m *TeamMemberService) GetTeamMemberDataByUserID(ctx context.Context, id uuid.UUID) (*models.TeamMemberGetParams, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMemberDataByUserID")
	}

	var r0 *models.TeamMemberGetParams
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.TeamMemberGetParams, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.TeamMemberGetParams); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMemberGetParams)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamMembers provides a mock function with given fields: ctx, workspaceID, page, pageSize
func (_m *TeamMemberService) GetTeamMembers(ctx context.Context, workspaceID uuid.UUID, page int, pageSize int) ([]*models.TeamMember, error) {
	ret := _m.Called(ctx, workspaceID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamMembers")
	}

	var r0 []*models.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) ([]*models.TeamMember, error)); ok {
		return rf(ctx, workspaceID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, int) []*models.TeamMember); ok {
		r0 = rf(ctx, workspaceID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, int) error); ok {
		r1 = rf(ctx, workspaceID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTeamMember provides a mock function with given fields: ctx, id
func (_m *TeamMemberService) RemoveTeamMember(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamMember")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTeamMemberService creates a new instance of TeamMemberService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeamMemberService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeamMemberService {
	mock := &TeamMemberService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
